{
  "Chart-1": {
    "buggy": "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n    if (dataset != null) {\n        return result;\n    }\n    int seriesCount = dataset.getRowCount();\n    if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n        for (int i = 0; i < seriesCount; i++) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    else {\n        for (int i = seriesCount - 1; i >= 0; i--) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    return result;\n}",
    "start": 1790,
    "end": 1822,
    "fix": "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n    if (dataset == null) {\n        return result;\n    }\n    int seriesCount = dataset.getRowCount();\n    if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n        for (int i = 0; i < seriesCount; i++) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    else {\n        for (int i = seriesCount - 1; i >= 0; i--) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    return result;\n}",
    "loc": "source/org/jfree/chart/renderer/category/AbstractCategoryItemRenderer.java",
    "issue_title": "#983 Potential NPE in AbstractCategoryItemRender.getLegendItems()",
    "issue_description": "Setting up a working copy of the current JFreeChart trunk in Eclipse I got a warning about a null pointer access in this bit of code from AbstractCategoryItemRender.java:\npublic LegendItemCollection getLegendItems() {\nLegendItemCollection result = new LegendItemCollection();\nif (this.plot == null) {\nreturn result;\n}\nint index = this.plot.getIndexOf(this);\nCategoryDataset dataset = this.plot.getDataset(index);\nif (dataset != null) {\nreturn result;\n}\nint seriesCount = dataset.getRowCount();\n...\n}\nThe warning is in the last code line where seriesCount is assigned. The variable dataset is guaranteed to be null in this location, I suppose that the check before that should actually read \"if (dataset == null)\", not \"if (dataset != null)\".\nThis is trunk as of 2010-02-08.",
    "buggy_fl": "public LegendItemCollection getLegendItems() {\n    LegendItemCollection result = new LegendItemCollection();\n    if (this.plot == null) {\n        return result;\n    }\n    int index = this.plot.getIndexOf(this);\n    CategoryDataset dataset = this.plot.getDataset(index);\n    if (dataset != null) { /* bug is here */\n        return result;\n    }\n    int seriesCount = dataset.getRowCount();\n    if (plot.getRowRenderingOrder().equals(SortOrder.ASCENDING)) {\n        for (int i = 0; i < seriesCount; i++) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    else {\n        for (int i = seriesCount - 1; i >= 0; i--) {\n            if (isSeriesVisibleInLegend(i)) {\n                LegendItem item = getLegendItem(index, i);\n                if (item != null) {\n                    result.add(item);\n                }\n            }\n        }\n    }\n    return result;\n}",
    "method_signature": {
      "return_type": "LegendItemCollection",
      "method_name": "getLegendItems",
      "params_string": ""
    },
    "trigger_test": {
      "org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests::test2947660": {
        "path": "Chart-1/tests/org/jfree/chart/renderer/category/junit/AbstractCategoryItemRendererTests.java",
        "function_name": "test2947660",
        "src": "    public void test2947660() {\n\n        AbstractCategoryItemRenderer r = new LineAndShapeRenderer();\n\n        assertNotNull(r.getLegendItems());\n\n        assertEquals(0, r.getLegendItems().getItemCount());\n\n\n\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n        CategoryPlot plot = new CategoryPlot();\n\n        plot.setDataset(dataset);\n\n        plot.setRenderer(r);\n\n        assertEquals(0, r.getLegendItems().getItemCount());\n\n\n\n        dataset.addValue(1.0, \"S1\", \"C1\");\n\n        LegendItemCollection lic = r.getLegendItems();\n\n        assertEquals(1, lic.getItemCount());\n\n        assertEquals(\"S1\", lic.get(0).getLabel());\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError: expected:<1> but was:<0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.test2947660(AbstractCategoryItemRendererTests.java:409)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError: expected:<1> but was:<0>\n\tat org.jfree.chart.renderer.category.junit.AbstractCategoryItemRendererTests.test2947660(AbstractCategoryItemRendererTests.java:409)  assertEquals(1, lic.getItemCount());"
      }
    },
    "buggy_code_comment": "/**\n* Returns a (possibly empty) collection of legend items for the series\n* that this renderer is responsible for drawing.\n*\n* @return The legend item collection (never <code>null</code>).\n*\n* @see #getLegendItem(int, int)\n*/"
  },
  "Chart-10": {
    "buggy": "public String generateToolTipFragment(String toolTipText) {\n    return \" title=\\\"\" + toolTipText\n        + \"\\\" alt=\\\"\\\"\";\n}",
    "start": 64,
    "end": 67,
    "fix": "public String generateToolTipFragment(String toolTipText) {\n    return \" title=\\\"\" + ImageMapUtilities.htmlEscape(toolTipText) \n        + \"\\\" alt=\\\"\\\"\";\n}",
    "loc": "source/org/jfree/chart/imagemap/StandardToolTipTagFragmentGenerator.java",
    "issue_title": "",
    "issue_description": "",
    "buggy_fl": "public String generateToolTipFragment(String toolTipText) {\n    return \" title=\\\"\" + toolTipText /* bug is here */\n        + \"\\\" alt=\\\"\\\"\";\n}",
    "method_signature": {
      "return_type": "String",
      "method_name": "generateToolTipFragment",
      "params_string": "String toolTipText"
    },
    "trigger_test": {
      "org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests::testGenerateURLFragment": {
        "path": "Chart-10/tests/org/jfree/chart/imagemap/junit/StandardToolTipTagFragmentGeneratorTests.java",
        "function_name": "testGenerateURLFragment",
        "src": "    public void testGenerateURLFragment() {\n\n        StandardToolTipTagFragmentGenerator g\n\n                = new StandardToolTipTagFragmentGenerator();\n\n        assertEquals(\" title=\\\"abc\\\" alt=\\\"\\\"\",\n\n                g.generateToolTipFragment(\"abc\"));\n\n        assertEquals(\" title=\\\"Series &quot;A&quot;, 100.0\\\" alt=\\\"\\\"\",\n\n                g.generateToolTipFragment(\"Series \\\"A\\\", 100.0\"));\n\n    }\n",
        "error_msg": "junit.framework.ComparisonFailure: expected:< title=\"Series [&quot;A&quot;], 100.0\" alt=\"\"> but was:< title=\"Series [\"A\"], 100.0\" alt=\"\">\n\tat junit.framework.Assert.assertEquals(Assert.java:100)\n\tat junit.framework.Assert.assertEquals(Assert.java:107)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:269)\n\tat org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests.testGenerateURLFragment(StandardToolTipTagFragmentGeneratorTests.java:80)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.ComparisonFailure: expected:< title=\"Series [&quot;A&quot;], 100.0\" alt=\"\"> but was:< title=\"Series [\"A\"], 100.0\" alt=\"\">\n\tat org.jfree.chart.imagemap.junit.StandardToolTipTagFragmentGeneratorTests.testGenerateURLFragment(StandardToolTipTagFragmentGeneratorTests.java:80)  assertEquals(\" title=\\\"Series &quot;A&quot;, 100.0\\\" alt=\\\"\\\"\",                g.generateToolTipFragment(\"Series \\\"A\\\", 100.0\"));"
      }
    },
    "buggy_code_comment": "/**\n* Generates a tooltip string to go in an HTML image map.\n*\n* @param toolTipText  the tooltip.\n*\n* @return The formatted HTML area tag attribute(s).\n*/"
  },
  "Chart-11": {
    "buggy": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n    PathIterator iterator2 = p1.getPathIterator(null);\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    boolean done = iterator1.isDone() && iterator2.isDone();\n    while (!done) {\n        if (iterator1.isDone() != iterator2.isDone()) {\n            return false;\n        }\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(d1, d2)) {\n            return false;\n        }\n        iterator1.next();\n        iterator2.next();\n        done = iterator1.isDone() && iterator2.isDone();\n    }\n    return true;\n}",
    "start": 264,
    "end": 296,
    "fix": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n    PathIterator iterator2 = p2.getPathIterator(null);\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    boolean done = iterator1.isDone() && iterator2.isDone();\n    while (!done) {\n        if (iterator1.isDone() != iterator2.isDone()) {\n            return false;\n        }\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(d1, d2)) {\n            return false;\n        }\n        iterator1.next();\n        iterator2.next();\n        done = iterator1.isDone() && iterator2.isDone();\n    }\n    return true;\n}",
    "loc": "source/org/jfree/chart/util/ShapeUtilities.java",
    "issue_title": "#868 JCommon 1.0.12 ShapeUtilities.equal(path1,path2)",
    "issue_description": "The comparison of two GeneralPath objects uses the same PathIterator for both objects. equal(GeneralPath path1, GeneralPath path2) will thus return true for any pair of non-null GeneralPath instances having the same windingRule.",
    "buggy_fl": "public static boolean equal(GeneralPath p1, GeneralPath p2) {\n    if (p1 == null) {\n        return (p2 == null);\n    }\n    if (p2 == null) {\n        return false;\n    }\n    if (p1.getWindingRule() != p2.getWindingRule()) {\n        return false;\n    }\n    PathIterator iterator1 = p1.getPathIterator(null);\n    PathIterator iterator2 = p1.getPathIterator(null); /* bug is here */\n    double[] d1 = new double[6];\n    double[] d2 = new double[6];\n    boolean done = iterator1.isDone() && iterator2.isDone();\n    while (!done) {\n        if (iterator1.isDone() != iterator2.isDone()) {\n            return false;\n        }\n        int seg1 = iterator1.currentSegment(d1);\n        int seg2 = iterator2.currentSegment(d2);\n        if (seg1 != seg2) {\n            return false;\n        }\n        if (!Arrays.equals(d1, d2)) {\n            return false;\n        }\n        iterator1.next();\n        iterator2.next();\n        done = iterator1.isDone() && iterator2.isDone();\n    }\n    return true;\n}",
    "method_signature": {
      "return_type": "boolean",
      "method_name": "equal",
      "params_string": "GeneralPath p1, GeneralPath p2"
    },
    "trigger_test": {
      "org.jfree.chart.util.junit.ShapeUtilitiesTests::testEqualGeneralPaths": {
        "path": "Chart-11/tests/org/jfree/chart/util/junit/ShapeUtilitiesTests.java",
        "function_name": "testEqualGeneralPaths",
        "src": "    public void testEqualGeneralPaths() {\n\n        GeneralPath g1 = new GeneralPath();\n\n        g1.moveTo(1.0f, 2.0f);\n\n        g1.lineTo(3.0f, 4.0f);\n\n        g1.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n\n        g1.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n\n        g1.closePath();\n\n        GeneralPath g2 = new GeneralPath();\n\n        g2.moveTo(1.0f, 2.0f);\n\n        g2.lineTo(3.0f, 4.0f);\n\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n\n        g2.closePath();\n\n        assertTrue(ShapeUtilities.equal(g1, g2));\n\n\n\n        g2 = new GeneralPath();\n\n        g2.moveTo(11.0f, 22.0f);\n\n        g2.lineTo(3.0f, 4.0f);\n\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n\n        g2.closePath();\n\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n\n\n        g2 = new GeneralPath();\n\n        g2.moveTo(1.0f, 2.0f);\n\n        g2.lineTo(33.0f, 44.0f);\n\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n\n        g2.closePath();\n\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n\n\n        g2 = new GeneralPath();\n\n        g2.moveTo(1.0f, 2.0f);\n\n        g2.lineTo(3.0f, 4.0f);\n\n        g2.curveTo(55.0f, 66.0f, 77.0f, 88.0f, 99.0f, 100.0f);\n\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n\n        g2.closePath();\n\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n\n\n        g2 = new GeneralPath();\n\n        g2.moveTo(1.0f, 2.0f);\n\n        g2.lineTo(3.0f, 4.0f);\n\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n\n        g2.quadTo(11.0f, 22.0f, 33.0f, 44.0f);\n\n        g2.closePath();\n\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n\n\n        g2 = new GeneralPath();\n\n        g2.moveTo(1.0f, 2.0f);\n\n        g2.lineTo(3.0f, 4.0f);\n\n        g2.curveTo(5.0f, 6.0f, 7.0f, 8.0f, 9.0f, 10.0f);\n\n        g2.quadTo(1.0f, 2.0f, 3.0f, 4.0f);\n\n        g2.lineTo(3.0f, 4.0f);\n\n        g2.closePath();\n\n        assertFalse(ShapeUtilities.equal(g1, g2));\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertFalse(Assert.java:39)\n\tat junit.framework.Assert.assertFalse(Assert.java:47)\n\tat junit.framework.TestCase.assertFalse(TestCase.java:219)\n\tat org.jfree.chart.util.junit.ShapeUtilitiesTests.testEqualGeneralPaths(ShapeUtilitiesTests.java:212)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.util.junit.ShapeUtilitiesTests.testEqualGeneralPaths(ShapeUtilitiesTests.java:212)  assertFalse(ShapeUtilities.equal(g1, g2));"
      }
    },
    "buggy_code_comment": "/**\n* Tests two polygons for equality.  If both are <code>null</code> this\n* method returns <code>true</code>.\n*\n* @param p1  path 1 (<code>null</code> permitted).\n* @param p2  path 2 (<code>null</code> permitted).\n*\n* @return A boolean.\n*/"
  },
  "Chart-12": {
    "buggy": "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n    this.dataset = dataset;\n    PiePlot piePlot = new PiePlot(null);\n    this.pieChart = new JFreeChart(piePlot);\n    this.pieChart.removeLegend();\n    this.dataExtractOrder = TableOrder.BY_COLUMN;\n    this.pieChart.setBackgroundPaint(null);\n    TextTitle seriesTitle = new TextTitle(\"Series Title\",\n            new Font(\"SansSerif\", Font.BOLD, 12));\n    seriesTitle.setPosition(RectangleEdge.BOTTOM);\n    this.pieChart.setTitle(seriesTitle);\n    this.aggregatedItemsKey = \"Other\";\n    this.aggregatedItemsPaint = Color.lightGray;\n    this.sectionPaints = new HashMap();\n}",
    "start": 143,
    "end": 158,
    "fix": "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n    setDataset(dataset);\n    PiePlot piePlot = new PiePlot(null);\n    this.pieChart = new JFreeChart(piePlot);\n    this.pieChart.removeLegend();\n    this.dataExtractOrder = TableOrder.BY_COLUMN;\n    this.pieChart.setBackgroundPaint(null);\n    TextTitle seriesTitle = new TextTitle(\"Series Title\",\n            new Font(\"SansSerif\", Font.BOLD, 12));\n    seriesTitle.setPosition(RectangleEdge.BOTTOM);\n    this.pieChart.setTitle(seriesTitle);\n    this.aggregatedItemsKey = \"Other\";\n    this.aggregatedItemsPaint = Color.lightGray;\n    this.sectionPaints = new HashMap();\n}",
    "loc": "source/org/jfree/chart/plot/MultiplePiePlot.java",
    "issue_title": "#213 Fix for MultiplePiePlot",
    "issue_description": "When dataset is passed into constructor for MultiplePiePlot, the dataset is not wired to a listener, as it would be if setDataset is called.",
    "buggy_fl": "public MultiplePiePlot(CategoryDataset dataset) {\n    super();\n    this.dataset = dataset; /* bug is here */\n    PiePlot piePlot = new PiePlot(null);\n    this.pieChart = new JFreeChart(piePlot);\n    this.pieChart.removeLegend();\n    this.dataExtractOrder = TableOrder.BY_COLUMN;\n    this.pieChart.setBackgroundPaint(null);\n    TextTitle seriesTitle = new TextTitle(\"Series Title\",\n            new Font(\"SansSerif\", Font.BOLD, 12));\n    seriesTitle.setPosition(RectangleEdge.BOTTOM);\n    this.pieChart.setTitle(seriesTitle);\n    this.aggregatedItemsKey = \"Other\";\n    this.aggregatedItemsPaint = Color.lightGray;\n    this.sectionPaints = new HashMap();\n}",
    "method_signature": {
      "return_type": "",
      "method_name": "MultiplePiePlot",
      "params_string": "CategoryDataset dataset"
    },
    "trigger_test": {
      "org.jfree.chart.plot.junit.MultiplePiePlotTests::testConstructor": {
        "path": "Chart-12/tests/org/jfree/chart/plot/junit/MultiplePiePlotTests.java",
        "function_name": "testConstructor",
        "src": "    public void testConstructor() {\n\n    \tMultiplePiePlot plot = new MultiplePiePlot();\n\n    \tassertNull(plot.getDataset());\n\n\n\n    \t// the following checks that the plot registers itself as a listener\n\n    \t// with the dataset passed to the constructor - see patch 1943021\n\n    \tDefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n    \tplot = new MultiplePiePlot(dataset);\n\n    \tassertTrue(dataset.hasListener(plot));\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.plot.junit.MultiplePiePlotTests.testConstructor(MultiplePiePlotTests.java:112)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.plot.junit.MultiplePiePlotTests.testConstructor(MultiplePiePlotTests.java:112)  assertTrue(dataset.hasListener(plot));"
      }
    },
    "buggy_code_comment": "/**\n* Creates a new plot.\n*\n* @param dataset  the dataset (<code>null</code> permitted).\n*/"
  },
  "Chart-13": {
    "buggy": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth() - w[2]),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n    h[4] = h[2];\n    w[4] = constraint.getWidth() - w[3] - w[2];\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                w[3], h[3]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                h[4]));\n    }\n    return new Size2D(constraint.getWidth(), constraint.getHeight());\n}",
    "start": 422,
    "end": 489,
    "fix": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n                new Range(0.0, Math.max(constraint.getWidth() - w[2], 0.0)),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n    h[4] = h[2];\n    w[4] = constraint.getWidth() - w[3] - w[2];\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                w[3], h[3]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                h[4]));\n    }\n    return new Size2D(constraint.getWidth(), constraint.getHeight());\n}",
    "loc": "source/org/jfree/chart/block/BorderArrangement.java",
    "issue_title": "",
    "issue_description": "",
    "buggy_fl": "protected Size2D arrangeFF(BlockContainer container, Graphics2D g2,\n                           RectangleConstraint constraint) {\n    double[] w = new double[5];\n    double[] h = new double[5];\n    w[0] = constraint.getWidth();\n    if (this.topBlock != null) {\n        RectangleConstraint c1 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0,\n                new Range(0.0, constraint.getHeight()),\n                LengthConstraintType.RANGE);\n        Size2D size = this.topBlock.arrange(g2, c1);\n        h[0] = size.height;\n    }\n    w[1] = w[0];\n    if (this.bottomBlock != null) {\n        RectangleConstraint c2 = new RectangleConstraint(w[0], null,\n                LengthConstraintType.FIXED, 0.0, new Range(0.0,\n                constraint.getHeight() - h[0]), LengthConstraintType.RANGE);\n        Size2D size = this.bottomBlock.arrange(g2, c2);\n        h[1] = size.height;\n    }\n    h[2] = constraint.getHeight() - h[1] - h[0];\n    if (this.leftBlock != null) {\n        RectangleConstraint c3 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth()),\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.leftBlock.arrange(g2, c3);\n        w[2] = size.width;\n    }\n    h[3] = h[2];\n    if (this.rightBlock != null) {\n        RectangleConstraint c4 = new RectangleConstraint(0.0,\n                new Range(0.0, constraint.getWidth() - w[2]), /* bug is here */\n                LengthConstraintType.RANGE, h[2], null,\n                LengthConstraintType.FIXED);\n        Size2D size = this.rightBlock.arrange(g2, c4);\n        w[3] = size.width;\n    }\n    h[4] = h[2];\n    w[4] = constraint.getWidth() - w[3] - w[2];\n    RectangleConstraint c5 = new RectangleConstraint(w[4], h[4]);\n    if (this.centerBlock != null) {\n        this.centerBlock.arrange(g2, c5);\n    }\n\n    if (this.topBlock != null) {\n        this.topBlock.setBounds(new Rectangle2D.Double(0.0, 0.0, w[0],\n                h[0]));\n    }\n    if (this.bottomBlock != null) {\n        this.bottomBlock.setBounds(new Rectangle2D.Double(0.0, h[0] + h[2],\n                w[1], h[1]));\n    }\n    if (this.leftBlock != null) {\n        this.leftBlock.setBounds(new Rectangle2D.Double(0.0, h[0], w[2],\n                h[2]));\n    }\n    if (this.rightBlock != null) {\n        this.rightBlock.setBounds(new Rectangle2D.Double(w[2] + w[4], h[0],\n                w[3], h[3]));\n    }\n    if (this.centerBlock != null) {\n        this.centerBlock.setBounds(new Rectangle2D.Double(w[2], h[0], w[4],\n                h[4]));\n    }\n    return new Size2D(constraint.getWidth(), constraint.getHeight());\n}",
    "method_signature": {
      "return_type": "Size2D",
      "method_name": "arrangeFF",
      "params_string": "BlockContainer container, Graphics2D g2, RectangleConstraint constraint"
    },
    "trigger_test": {
      "org.jfree.chart.block.junit.BorderArrangementTests::testSizingWithWidthConstraint": {
        "path": "Chart-13/tests/org/jfree/chart/block/junit/BorderArrangementTests.java",
        "function_name": "testSizingWithWidthConstraint",
        "src": "    public void testSizingWithWidthConstraint() {\n\n        RectangleConstraint constraint = new RectangleConstraint(\n\n            10.0, new Range(10.0, 10.0), LengthConstraintType.FIXED,\n\n            0.0, new Range(0.0, 0.0), LengthConstraintType.NONE\n\n        );\n\n                \n\n        BlockContainer container = new BlockContainer(new BorderArrangement());\n\n        BufferedImage image = new BufferedImage(\n\n            200, 100, BufferedImage.TYPE_INT_RGB\n\n        );\n\n        Graphics2D g2 = image.createGraphics();\n\n        \n\n        // TBLRC\n\n        // 00001 - center item only\n\n        container.add(new EmptyBlock(5.0, 6.0));\n\n        Size2D size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(6.0, size.height, EPSILON);\n\n        \n\n        container.clear();\n\n        container.add(new EmptyBlock(15.0, 16.0));\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(16.0, size.height, EPSILON);\n\n\n\n        // TBLRC\n\n        // 00010 - right item only\n\n        container.clear();\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(45.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 00011 - right and center items\n\n        container.clear();\n\n        container.add(new EmptyBlock(7.0, 20.0));\n\n        container.add(new EmptyBlock(8.0, 45.6), RectangleEdge.RIGHT);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(45.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 00100 - left item only\n\n        container.clear();\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(45.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 00101 - left and center items\n\n        container.clear();\n\n        container.add(new EmptyBlock(10.0, 20.0));\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(45.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 00110 - left and right items\n\n        container.clear();\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(45.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 00111 - left, right and center items\n\n        container.clear();\n\n        container.add(new EmptyBlock(10.0, 20.0));\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n\n        container.add(new EmptyBlock(5.4, 3.2), RectangleEdge.RIGHT);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(45.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 01000 - bottom item only\n\n        container.clear();\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(45.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 01001 - bottom and center only\n\n        container.clear();\n\n        container.add(new EmptyBlock(10.0, 20.0));\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 01010 - bottom and right only\n\n        container.clear();\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 01011 - bottom, right and center\n\n        container.clear();\n\n        container.add(new EmptyBlock(21.0, 12.3));\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 01100\n\n        container.clear();\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 01101 - bottom, left and center\n\n        container.clear();\n\n        container.add(new EmptyBlock(21.0, 12.3));\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 01110 - bottom. left and right\n\n        container.clear();\n\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 01111\n\n        container.clear();\n\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n\n        container.add(new EmptyBlock(9.0, 10.0));\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(14.0, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 10000 - top item only\n\n        container.clear();\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(45.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 10001 - top and center only\n\n        container.clear();\n\n        container.add(new EmptyBlock(10.0, 20.0));\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n                \n\n        // TBLRC\n\n        // 10010 - right and top only\n\n        container.clear();\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.RIGHT);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 10011 - top, right and center\n\n        container.clear();\n\n        container.add(new EmptyBlock(21.0, 12.3));\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.RIGHT);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n\n\n        // TBLRC\n\n        // 10100 - top and left only\n\n        container.clear();\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.LEFT);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.TOP);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 10101 - top, left and center\n\n        container.clear();\n\n        container.add(new EmptyBlock(21.0, 12.3));\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 10110 - top, left and right\n\n        container.clear();\n\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.LEFT);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 10111\n\n        container.clear();\n\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n\n        container.add(new EmptyBlock(9.0, 10.0));\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(12.0, size.height, EPSILON);\n\n\n\n        // TBLRC\n\n        // 11000 - top and bottom only\n\n        container.clear();\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(65.6, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 11001\n\n        container.clear();\n\n        container.add(new EmptyBlock(21.0, 12.3));\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(77.9, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 11010 - top, bottom and right\n\n        container.clear();\n\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.RIGHT);\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(77.9, size.height, EPSILON);\n\n                \n\n        // TBLRC\n\n        // 11011\n\n        container.clear();\n\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n\n        container.add(new EmptyBlock(9.0, 10.0));\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(16.0, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 11100\n\n        container.clear();\n\n        container.add(new EmptyBlock(21.0, 12.3), RectangleEdge.LEFT);\n\n        container.add(new EmptyBlock(10.0, 20.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(12.3, 45.6), RectangleEdge.BOTTOM);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(77.9, size.height, EPSILON);\n\n\n\n        // TBLRC\n\n        // 11101\n\n        container.clear();\n\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n\n        container.add(new EmptyBlock(9.0, 10.0));\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(16.0, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 11110\n\n        container.clear();\n\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(14.0, size.height, EPSILON);\n\n        \n\n        // TBLRC\n\n        // 11111 - all\n\n        container.clear();\n\n        container.add(new EmptyBlock(1.0, 2.0), RectangleEdge.TOP);\n\n        container.add(new EmptyBlock(3.0, 4.0), RectangleEdge.BOTTOM);\n\n        container.add(new EmptyBlock(5.0, 6.0), RectangleEdge.LEFT);\n\n        container.add(new EmptyBlock(7.0, 8.0), RectangleEdge.RIGHT);\n\n        container.add(new EmptyBlock(9.0, 10.0));\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(16.0, size.height, EPSILON);\n\n\n\n        // TBLRC\n\n        // 00000 - no items\n\n        container.clear();\n\n        size = container.arrange(g2, constraint);\n\n        assertEquals(10.0, size.width, EPSILON);\n\n        assertEquals(0.0, size.height, EPSILON);\n\n        \n\n    }\n",
        "error_msg": "java.lang.IllegalArgumentException: Range(double, double): require lower (0.0) <= upper (-2.3000000000000007).\n\tat org.jfree.data.Range.<init>(Range.java:87)\n\tat org.jfree.chart.block.BorderArrangement.arrangeFF(BorderArrangement.java:454)\n\tat org.jfree.chart.block.BorderArrangement.arrange(BorderArrangement.java:152)\n\tat org.jfree.chart.block.BorderArrangement.arrangeFN(BorderArrangement.java:323)\n\tat org.jfree.chart.block.BorderArrangement.arrange(BorderArrangement.java:149)\n\tat org.jfree.chart.block.BlockContainer.arrange(BlockContainer.java:182)\n\tat org.jfree.chart.block.junit.BorderArrangementTests.testSizingWithWidthConstraint(BorderArrangementTests.java:560)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.IllegalArgumentException: Range(double, double): require lower (0.0) <= upper (-2.3000000000000007).\n\tat org.jfree.data.Range.<init>(Range.java:87)  throw new IllegalArgumentException(msg);\n\tat org.jfree.chart.block.BorderArrangement.arrangeFF(BorderArrangement.java:454)  RectangleConstraint c4 = new RectangleConstraint(0.0,                    new Range(0.0, constraint.getWidth() - w[2]),                    LengthConstraintType.RANGE, h[2], null,                    LengthConstraintType.FIXED);\n\tat org.jfree.chart.block.BorderArrangement.arrange(BorderArrangement.java:152)  contentSize = arrangeFF(container, g2, constraint);\n\tat org.jfree.chart.block.BorderArrangement.arrangeFN(BorderArrangement.java:323)  return arrange(container, g2, new RectangleConstraint(width, height));\n\tat org.jfree.chart.block.BorderArrangement.arrange(BorderArrangement.java:149)  contentSize = arrangeFN(container, g2, constraint.getWidth());\n\tat org.jfree.chart.block.BlockContainer.arrange(BlockContainer.java:182)  return this.arrangement.arrange(this, g2, constraint);\n\tat org.jfree.chart.block.junit.BorderArrangementTests.testSizingWithWidthConstraint(BorderArrangementTests.java:560)  size = container.arrange(g2, constraint);"
      }
    },
    "buggy_code_comment": "/**\n* Arranges the items within a container.\n*\n* @param container  the container.\n* @param constraint  the constraint.\n* @param g2  the graphics device.\n*\n* @return The container size after the arrangement.\n*/"
  },
  "Chart-17": {
    "buggy": "public Object clone() throws CloneNotSupportedException {\n    Object clone = createCopy(0, getItemCount() - 1);\n    return clone;\n}",
    "start": 856,
    "end": 859,
    "fix": "public Object clone() throws CloneNotSupportedException {\n    TimeSeries clone = (TimeSeries) super.clone();\n    clone.data = (List) ObjectUtilities.deepClone(this.data);\n    return clone;\n}",
    "loc": "source/org/jfree/data/time/TimeSeries.java",
    "issue_title": "#803 cloning of TimeSeries",
    "issue_description": "It's just a minor bug!\nWhen I clone a TimeSeries which has no items, I get an IllegalArgumentException (\"Requires start <= end\").\nBut I don't think the user should be responsible for checking whether the TimeSeries has any items or not.",
    "buggy_fl": "public Object clone() throws CloneNotSupportedException {\n    Object clone = createCopy(0, getItemCount() - 1); /* bug is here */\n    return clone;\n}",
    "method_signature": {
      "return_type": "Object",
      "method_name": "clone",
      "params_string": ""
    },
    "trigger_test": {
      "org.jfree.data.time.junit.TimeSeriesTests::testBug1832432": {
        "path": "Chart-17/tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "function_name": "testBug1832432",
        "src": "    public void testBug1832432() {\n\n        TimeSeries s1 = new TimeSeries(\"Series\");\n\n        TimeSeries s2 = null;\n\n        try {\n\n            s2 = (TimeSeries) s1.clone();\n\n        }\n\n        catch (CloneNotSupportedException e) {\n\n            e.printStackTrace();\n\n        }\n\n        assertTrue(s1 != s2);\n\n        assertTrue(s1.getClass() == s2.getClass());\n\n        assertTrue(s1.equals(s2));\n\n\n\n        // test independence\n\n        s1.add(new Day(1, 1, 2007), 100.0);\n\n        assertFalse(s1.equals(s2));    \t\n\n    }\n",
        "error_msg": "java.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:880)\n\tat org.jfree.data.time.TimeSeries.clone(TimeSeries.java:857)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testBug1832432(TimeSeriesTests.java:619)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:880)  throw new IllegalArgumentException(\"Requires start <= end.\");\n\tat org.jfree.data.time.TimeSeries.clone(TimeSeries.java:857)  Object clone = createCopy(0, getItemCount() - 1);\n\tat org.jfree.data.time.junit.TimeSeriesTests.testBug1832432(TimeSeriesTests.java:619)  s2 = (TimeSeries) s1.clone();"
      }
    },
    "buggy_code_comment": "/**\n* Returns a clone of the time series.\n* <P>\n* Notes:\n* <ul>\n*   <li>no need to clone the domain and range descriptions, since String\n*     object is immutable;</li>\n*   <li>we pass over to the more general method clone(start, end).</li>\n* </ul>\n*\n* @return A clone of the time series.\n*\n* @throws CloneNotSupportedException not thrown by this class, but\n*         subclasses may differ.\n*/"
  },
  "Chart-20": {
    "buggy": "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n    super(paint, stroke, paint, stroke, alpha);\n    this.value = value;\n}",
    "start": 93,
    "end": 97,
    "fix": "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n    super(paint, stroke, outlinePaint, outlineStroke, alpha);\n    this.value = value;\n}",
    "loc": "source/org/jfree/chart/plot/ValueMarker.java",
    "issue_title": "",
    "issue_description": "",
    "buggy_fl": "public ValueMarker(double value, Paint paint, Stroke stroke, \n                   Paint outlinePaint, Stroke outlineStroke, float alpha) {\n    super(paint, stroke, paint, stroke, alpha); /* bug is here */\n    this.value = value;\n}",
    "method_signature": {
      "return_type": "",
      "method_name": "ValueMarker",
      "params_string": "double value, Paint paint, Stroke stroke, Paint outlinePaint, Stroke outlineStroke, float alpha"
    },
    "trigger_test": {
      "org.jfree.chart.plot.junit.ValueMarkerTests::test1808376": {
        "path": "Chart-20/tests/org/jfree/chart/plot/junit/ValueMarkerTests.java",
        "function_name": "test1808376",
        "src": "    public void test1808376() {\n\n        Stroke stroke = new BasicStroke(1.0f);\n\n        Stroke outlineStroke = new BasicStroke(2.0f);\n\n        ValueMarker m = new ValueMarker(1.0, Color.red, stroke, Color.blue, \n\n                outlineStroke, 0.5f);\n\n        assertEquals(1.0, m.getValue(), EPSILON);\n\n        assertEquals(Color.red, m.getPaint());\n\n        assertEquals(stroke, m.getStroke());\n\n        assertEquals(Color.blue, m.getOutlinePaint());\n\n        assertEquals(outlineStroke, m.getOutlineStroke());\n\n        assertEquals(0.5f, m.getAlpha(), EPSILON);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError: expected:<java.awt.Color[r=0,g=0,b=255]> but was:<java.awt.Color[r=255,g=0,b=0]>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.jfree.chart.plot.junit.ValueMarkerTests.test1808376(ValueMarkerTests.java:297)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError: expected:<java.awt.Color[r=0,g=0,b=255]> but was:<java.awt.Color[r=255,g=0,b=0]>\n\tat org.jfree.chart.plot.junit.ValueMarkerTests.test1808376(ValueMarkerTests.java:297)  assertEquals(Color.blue, m.getOutlinePaint());"
      }
    },
    "buggy_code_comment": "/**\n* Creates a new value marker.\n*\n* @param value  the value.\n* @param paint  the paint (<code>null</code> not permitted).\n* @param stroke  the stroke (<code>null</code> not permitted).\n* @param outlinePaint  the outline paint (<code>null</code> permitted).\n* @param outlineStroke  the outline stroke (<code>null</code> permitted).\n* @param alpha  the alpha transparency (in the range 0.0f to 1.0f).\n*/"
  },
  "Chart-24": {
    "buggy": "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n    int g = (int) ((value - this.lowerBound) / (this.upperBound \n            - this.lowerBound) * 255.0);\n    return new Color(g, g, g);\n}",
    "start": 123,
    "end": 129,
    "fix": "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n    int g = (int) ((v - this.lowerBound) / (this.upperBound \n            - this.lowerBound) * 255.0);\n    return new Color(g, g, g);\n}",
    "loc": "source/org/jfree/chart/renderer/GrayPaintScale.java",
    "issue_title": "",
    "issue_description": "",
    "buggy_fl": "public Paint getPaint(double value) {\n    double v = Math.max(value, this.lowerBound);\n    v = Math.min(v, this.upperBound);\n    int g = (int) ((value - this.lowerBound) / (this.upperBound  /* bug is here */\n            - this.lowerBound) * 255.0);\n    return new Color(g, g, g);\n}",
    "method_signature": {
      "return_type": "Paint",
      "method_name": "getPaint",
      "params_string": "double value"
    },
    "trigger_test": {
      "org.jfree.chart.renderer.junit.GrayPaintScaleTests::testGetPaint": {
        "path": "Chart-24/tests/org/jfree/chart/renderer/junit/GrayPaintScaleTests.java",
        "function_name": "testGetPaint",
        "src": "    public void testGetPaint() {\n\n        GrayPaintScale gps = new GrayPaintScale();\n\n        Color c = (Color) gps.getPaint(0.0);\n\n        assertTrue(c.equals(Color.black));\n\n        c = (Color) gps.getPaint(1.0);\n\n        assertTrue(c.equals(Color.white));\n\n        \n\n        // check lookup values that are outside the bounds - see bug report\n\n        // 1767315\n\n        c = (Color) gps.getPaint(-0.5);\n\n        assertTrue(c.equals(Color.black));\n\n        c = (Color) gps.getPaint(1.5);\n\n        assertTrue(c.equals(Color.white));\n\n    }\n",
        "error_msg": "java.lang.IllegalArgumentException: Color parameter outside of expected range: Red Green Blue\n\tat java.awt.Color.testColorValueRange(Color.java:310)\n\tat java.awt.Color.<init>(Color.java:395)\n\tat java.awt.Color.<init>(Color.java:369)\n\tat org.jfree.chart.renderer.GrayPaintScale.getPaint(GrayPaintScale.java:128)\n\tat org.jfree.chart.renderer.junit.GrayPaintScaleTests.testGetPaint(GrayPaintScaleTests.java:107)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.IllegalArgumentException: Color parameter outside of expected range: Red Green Blue\n\tat org.jfree.chart.renderer.GrayPaintScale.getPaint(GrayPaintScale.java:128)  return new Color(g, g, g);\n\tat org.jfree.chart.renderer.junit.GrayPaintScaleTests.testGetPaint(GrayPaintScaleTests.java:107)  c = (Color) gps.getPaint(-0.5);"
      }
    },
    "buggy_code_comment": "/**\n* Returns a paint for the specified value.\n*\n* @param value  the value (must be within the range specified by the\n*         lower and upper bounds for the scale).\n*\n* @return A paint for the specified value.\n*/"
  },
  "Chart-26": {
    "buggy": "protected AxisState drawLabel(String label, Graphics2D g2, \n        Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n        AxisState state, PlotRenderingInfo plotState) {\n\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    \n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    \n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() \n                - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() \n                + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getRight() \n                - w / 2.0);\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() + Math.PI / 2.0, \n                labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() \n                        + insets.getLeft() + w / 2.0);\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n            EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(this, hotspot, \n                        this.labelToolTip, this.labelURL));\n            }\n    }\n    return state;\n\n}",
    "start": 1092,
    "end": 1200,
    "fix": "protected AxisState drawLabel(String label, Graphics2D g2, \n        Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n        AxisState state, PlotRenderingInfo plotState) {\n\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    \n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    \n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() \n                - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() \n                + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getRight() \n                - w / 2.0);\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() + Math.PI / 2.0, \n                labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() \n                        + insets.getLeft() + w / 2.0);\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n        if (owner != null) {\n            EntityCollection entities = owner.getEntityCollection();\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(this, hotspot, \n                        this.labelToolTip, this.labelURL));\n            }\n        }\n    }\n    return state;\n\n}",
    "loc": "source/org/jfree/chart/axis/Axis.java",
    "issue_title": "",
    "issue_description": "",
    "buggy_fl": "protected AxisState drawLabel(String label, Graphics2D g2, \n        Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, \n        AxisState state, PlotRenderingInfo plotState) {\n\n    // it is unlikely that 'state' will be null, but check anyway...\n    if (state == null) {\n        throw new IllegalArgumentException(\"Null 'state' argument.\");\n    }\n    \n    if ((label == null) || (label.equals(\"\"))) {\n        return state;\n    }\n\n    Font font = getLabelFont();\n    RectangleInsets insets = getLabelInsets();\n    g2.setFont(font);\n    g2.setPaint(getLabelPaint());\n    FontMetrics fm = g2.getFontMetrics();\n    Rectangle2D labelBounds = TextUtilities.getTextBounds(label, g2, fm);\n    Shape hotspot = null;\n    \n    if (edge == RectangleEdge.TOP) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() - insets.getBottom() \n                - h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorUp(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.BOTTOM) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle(), labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) dataArea.getCenterX();\n        float labely = (float) (state.getCursor() + insets.getTop() \n                + h / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle(), TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorDown(insets.getTop() + labelBounds.getHeight() \n                + insets.getBottom());\n    }\n    else if (edge == RectangleEdge.LEFT) {\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() - Math.PI / 2.0, labelBounds.getCenterX(), \n                labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() - insets.getRight() \n                - w / 2.0);\n        float labely = (float) dataArea.getCenterY();\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() - Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorLeft(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n    }\n    else if (edge == RectangleEdge.RIGHT) {\n\n        AffineTransform t = AffineTransform.getRotateInstance(\n                getLabelAngle() + Math.PI / 2.0, \n                labelBounds.getCenterX(), labelBounds.getCenterY());\n        Shape rotatedLabelBounds = t.createTransformedShape(labelBounds);\n        labelBounds = rotatedLabelBounds.getBounds2D();\n        float w = (float) labelBounds.getWidth();\n        float h = (float) labelBounds.getHeight();\n        float labelx = (float) (state.getCursor() \n                        + insets.getLeft() + w / 2.0);\n        float labely = (float) (dataArea.getY() + dataArea.getHeight() \n                / 2.0);\n        TextUtilities.drawRotatedString(label, g2, labelx, labely, \n                TextAnchor.CENTER, getLabelAngle() + Math.PI / 2.0, \n                TextAnchor.CENTER);\n        hotspot = new Rectangle2D.Float(labelx - w / 2.0f, \n                labely - h / 2.0f, w, h);\n        state.cursorRight(insets.getLeft() + labelBounds.getWidth() \n                + insets.getRight());\n\n    }\n    if (plotState != null && hotspot != null) {\n        ChartRenderingInfo owner = plotState.getOwner();\n            EntityCollection entities = owner.getEntityCollection(); /* bug is here */\n            if (entities != null) {\n                entities.add(new AxisLabelEntity(this, hotspot, \n                        this.labelToolTip, this.labelURL));\n            }\n    } /* bug is here */\n    return state;\n\n}",
    "method_signature": {
      "return_type": "AxisState",
      "method_name": "drawLabel",
      "params_string": "String label, Graphics2D g2, Rectangle2D plotArea, Rectangle2D dataArea, RectangleEdge edge, AxisState state, PlotRenderingInfo plotState"
    },
    "trigger_test": {
      "org.jfree.chart.junit.AreaChartTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/junit/AreaChartTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100, \n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.junit.AreaChartTests.testDrawWithNullInfo(AreaChartTests.java:149)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.junit.AreaChartTests.testDrawWithNullInfo(AreaChartTests.java:149)  assertTrue(success);"
      },
      "org.jfree.chart.junit.BarChart3DTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/junit/BarChart3DTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100, \n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.junit.BarChart3DTests.testDrawWithNullInfo(BarChart3DTests.java:125)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.junit.BarChart3DTests.testDrawWithNullInfo(BarChart3DTests.java:125)  assertTrue(success);"
      },
      "org.jfree.chart.junit.BarChartTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/junit/BarChartTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100, \n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n            success = false;\n\n        }\n\n\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.junit.BarChartTests.testDrawWithNullInfo(BarChartTests.java:128)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.junit.BarChartTests.testDrawWithNullInfo(BarChartTests.java:128)  assertTrue(success);"
      },
      "org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/junit/GanttChartTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100, \n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.junit.GanttChartTests.testDrawWithNullInfo(GanttChartTests.java:124)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.junit.GanttChartTests.testDrawWithNullInfo(GanttChartTests.java:124)  assertTrue(success);"
      },
      "org.jfree.chart.junit.GanttChartTests::testDrawWithNullInfo2": {
        "path": "Chart-26/tests/org/jfree/chart/junit/GanttChartTests.java",
        "function_name": "testDrawWithNullInfo2",
        "src": "    public void testDrawWithNullInfo2() {\n\n        boolean success = false;\n\n        try {\n\n            JFreeChart chart = createGanttChart();\n\n            CategoryPlot plot = (CategoryPlot) chart.getPlot();\n\n            plot.setDataset(createDataset());\n\n            /* BufferedImage img =*/ chart.createBufferedImage(300, 200, null);\n\n            success = true;\n\n        }\n\n        catch (NullPointerException e) {\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.junit.GanttChartTests.testDrawWithNullInfo2(GanttChartTests.java:143)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.junit.GanttChartTests.testDrawWithNullInfo2(GanttChartTests.java:143)  assertTrue(success);"
      },
      "org.jfree.chart.junit.LineChart3DTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/junit/LineChart3DTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100, \n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.junit.LineChart3DTests.testDrawWithNullInfo(LineChart3DTests.java:123)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.junit.LineChart3DTests.testDrawWithNullInfo(LineChart3DTests.java:123)  assertTrue(success);"
      },
      "org.jfree.chart.junit.LineChartTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/junit/LineChartTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100, \n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.junit.LineChartTests.testDrawWithNullInfo(LineChartTests.java:123)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.junit.LineChartTests.testDrawWithNullInfo(LineChartTests.java:123)  assertTrue(success);"
      },
      "org.jfree.chart.junit.StackedAreaChartTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/junit/StackedAreaChartTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100, \n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n          success = false;\n\n        }\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.junit.StackedAreaChartTests.testDrawWithNullInfo(StackedAreaChartTests.java:123)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.junit.StackedAreaChartTests.testDrawWithNullInfo(StackedAreaChartTests.java:123)  assertTrue(success);"
      },
      "org.jfree.chart.junit.StackedBarChart3DTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/junit/StackedBarChart3DTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100, \n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n          success = false;\n\n        }\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.junit.StackedBarChart3DTests.testDrawWithNullInfo(StackedBarChart3DTests.java:123)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.junit.StackedBarChart3DTests.testDrawWithNullInfo(StackedBarChart3DTests.java:123)  assertTrue(success);"
      },
      "org.jfree.chart.junit.StackedBarChartTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/junit/StackedBarChartTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100, \n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n          success = false;\n\n        }\n\n\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.junit.StackedBarChartTests.testDrawWithNullInfo(StackedBarChartTests.java:129)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.junit.StackedBarChartTests.testDrawWithNullInfo(StackedBarChartTests.java:129)  assertTrue(success);"
      },
      "org.jfree.chart.junit.WaterfallChartTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/junit/WaterfallChartTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100, \n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, \n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n            success = false;\n\n        }\n\n\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.junit.WaterfallChartTests.testDrawWithNullInfo(WaterfallChartTests.java:121)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.junit.WaterfallChartTests.testDrawWithNullInfo(WaterfallChartTests.java:121)  assertTrue(success);"
      },
      "org.jfree.chart.plot.junit.CategoryPlotTests::test1654215": {
        "path": "Chart-26/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "function_name": "test1654215",
        "src": "    public void test1654215() {\n\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n        JFreeChart chart = ChartFactory.createLineChart(\"Title\", \"X\", \"Y\",\n\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n\n        plot.setRenderer(1, new LineAndShapeRenderer());\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100, \n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n            e.printStackTrace();\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.test1654215(CategoryPlotTests.java:705)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.test1654215(CategoryPlotTests.java:705)  assertTrue(success);"
      },
      "org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization3": {
        "path": "Chart-26/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "function_name": "testSerialization3",
        "src": "    public void testSerialization3() {\n\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n        JFreeChart chart = ChartFactory.createBarChart(\n\n            \"Test Chart\",\n\n            \"Category Axis\",\n\n            \"Value Axis\",\n\n            dataset,\n\n            PlotOrientation.VERTICAL,\n\n            true,\n\n            true,\n\n            false\n\n        );\n\n        JFreeChart chart2 = null;\n\n        \n\n        // serialize and deserialize the chart....\n\n        try {\n\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n\n            ObjectOutput out = new ObjectOutputStream(buffer);\n\n            out.writeObject(chart);\n\n            out.close();\n\n\n\n            ObjectInput in = new ObjectInputStream(\n\n                    new ByteArrayInputStream(buffer.toByteArray()));\n\n            chart2 = (JFreeChart) in.readObject();\n\n            in.close();\n\n        }\n\n        catch (Exception e) {\n\n            fail(e.toString());\n\n        }\n\n\n\n        // now check that the chart is usable...\n\n        boolean passed = true;\n\n        try {\n\n            chart2.createBufferedImage(300, 200);\n\n        }\n\n        catch (Exception e) {\n\n            passed = false;  \n\n            e.printStackTrace();            \n\n        }\n\n        assertTrue(passed);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization3(CategoryPlotTests.java:514)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization3(CategoryPlotTests.java:514)  assertTrue(passed);"
      },
      "org.jfree.chart.plot.junit.CategoryPlotTests::testSerialization4": {
        "path": "Chart-26/tests/org/jfree/chart/plot/junit/CategoryPlotTests.java",
        "function_name": "testSerialization4",
        "src": "    public void testSerialization4() {\n\n        DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n        JFreeChart chart = ChartFactory.createBarChart(\n\n            \"Test Chart\",\n\n            \"Category Axis\",\n\n            \"Value Axis\",\n\n            dataset,\n\n            PlotOrientation.VERTICAL,\n\n            true,\n\n            true,\n\n            false\n\n        );\n\n        CategoryPlot plot = (CategoryPlot) chart.getPlot();\n\n        plot.addRangeMarker(new ValueMarker(1.1), Layer.FOREGROUND);\n\n        plot.addRangeMarker(new IntervalMarker(2.2, 3.3), Layer.BACKGROUND);\n\n        JFreeChart chart2 = null;\n\n        \n\n        // serialize and deserialize the chart....\n\n        try {\n\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n\n            ObjectOutput out = new ObjectOutputStream(buffer);\n\n            out.writeObject(chart);\n\n            out.close();\n\n\n\n            ObjectInput in = new ObjectInputStream(\n\n                    new ByteArrayInputStream(buffer.toByteArray()));\n\n            chart2 = (JFreeChart) in.readObject();\n\n            in.close();\n\n        }\n\n        catch (Exception e) {\n\n            fail(e.toString());\n\n        }\n\n        assertEquals(chart, chart2);\n\n        \n\n        // now check that the chart is usable...\n\n        boolean passed = true;\n\n        try {\n\n            chart2.createBufferedImage(300, 200);\n\n        }\n\n        catch (Exception e) {\n\n            passed = false;  \n\n            e.printStackTrace();            \n\n        }\n\n        assertTrue(passed);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization4(CategoryPlotTests.java:563)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.plot.junit.CategoryPlotTests.testSerialization4(CategoryPlotTests.java:563)  assertTrue(passed);"
      },
      "org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/renderer/category/junit/BoxAndWhiskerRendererTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n\n            DefaultBoxAndWhiskerCategoryDataset dataset \n\n                = new DefaultBoxAndWhiskerCategoryDataset();\n\n            dataset.add(new BoxAndWhiskerItem(new Double(1.0), new Double(2.0),\n\n                    new Double(0.0), new Double(4.0), new Double(0.5), \n\n                    new Double(4.5), new Double(-0.5), new Double(5.5), \n\n                    null), \"S1\", \"C1\");\n\n            CategoryPlot plot = new CategoryPlot(dataset, \n\n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n\n                    new BoxAndWhiskerRenderer());\n\n            JFreeChart chart = new JFreeChart(plot);\n\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n\n                    null);\n\n            success = true;\n\n        }\n\n        catch (NullPointerException e) {\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullInfo(BoxAndWhiskerRendererTests.java:208)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.BoxAndWhiskerRendererTests.testDrawWithNullInfo(BoxAndWhiskerRendererTests.java:208)  assertTrue(success);"
      },
      "org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/renderer/category/junit/GroupedStackedBarRendererTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n            dataset.addValue(1.0, \"S1\", \"C1\");\n\n            dataset.addValue(2.0, \"S1\", \"C2\");\n\n            dataset.addValue(3.0, \"S2\", \"C1\");\n\n            dataset.addValue(4.0, \"S2\", \"C2\");\n\n            GroupedStackedBarRenderer renderer \n\n                = new GroupedStackedBarRenderer();\n\n            CategoryPlot plot = new CategoryPlot(dataset, \n\n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n\n                    renderer);\n\n            JFreeChart chart = new JFreeChart(plot);\n\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n\n                    null);\n\n            success = true;\n\n        }\n\n        catch (NullPointerException e) {\n\n            e.printStackTrace();\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testDrawWithNullInfo(GroupedStackedBarRendererTests.java:176)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.GroupedStackedBarRendererTests.testDrawWithNullInfo(GroupedStackedBarRendererTests.java:176)  assertTrue(success);"
      },
      "org.jfree.chart.renderer.category.junit.IntervalBarRendererTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/renderer/category/junit/IntervalBarRendererTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n\n            double[][] starts = new double[][] {{0.1, 0.2, 0.3}, \n\n                    {0.3, 0.4, 0.5}};\n\n            double[][] ends = new double[][] {{0.5, 0.6, 0.7}, {0.7, 0.8, 0.9}};\n\n            DefaultIntervalCategoryDataset dataset \n\n                = new DefaultIntervalCategoryDataset(starts, ends);        \n\n            IntervalBarRenderer renderer = new IntervalBarRenderer();\n\n            CategoryPlot plot = new CategoryPlot(dataset, \n\n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n\n                    renderer);\n\n            JFreeChart chart = new JFreeChart(plot);\n\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n\n                    null);\n\n            success = true;\n\n        }\n\n        catch (NullPointerException e) {\n\n            e.printStackTrace();\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testDrawWithNullInfo(IntervalBarRendererTests.java:176)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.IntervalBarRendererTests.testDrawWithNullInfo(IntervalBarRendererTests.java:176)  assertTrue(success);"
      },
      "org.jfree.chart.renderer.category.junit.LayeredBarRendererTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/renderer/category/junit/LayeredBarRendererTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n            dataset.addValue(1.0, \"S1\", \"C1\");\n\n            CategoryPlot plot = new CategoryPlot(dataset, \n\n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n\n                    new LayeredBarRenderer());\n\n            JFreeChart chart = new JFreeChart(plot);\n\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n\n                    null);\n\n            success = true;\n\n        }\n\n        catch (NullPointerException e) {\n\n            e.printStackTrace();\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testDrawWithNullInfo(LayeredBarRendererTests.java:172)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.LayeredBarRendererTests.testDrawWithNullInfo(LayeredBarRendererTests.java:172)  assertTrue(success);"
      },
      "org.jfree.chart.renderer.category.junit.LevelRendererTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/renderer/category/junit/LevelRendererTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n            dataset.addValue(1.0, \"S1\", \"C1\");\n\n            CategoryPlot plot = new CategoryPlot(dataset, \n\n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n\n                    new LevelRenderer());\n\n            JFreeChart chart = new JFreeChart(plot);\n\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n\n                    null);\n\n            success = true;\n\n        }\n\n        catch (NullPointerException e) {\n\n            e.printStackTrace();\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.LevelRendererTests.testDrawWithNullInfo(LevelRendererTests.java:213)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.LevelRendererTests.testDrawWithNullInfo(LevelRendererTests.java:213)  assertTrue(success);"
      },
      "org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/renderer/category/junit/MinMaxCategoryRendererTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n\n            DefaultCategoryDataset dataset = new DefaultCategoryDataset();\n\n            dataset.addValue(1.0, \"S1\", \"C1\");\n\n            CategoryPlot plot = new CategoryPlot(dataset, \n\n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n\n                    new MinMaxCategoryRenderer());\n\n            JFreeChart chart = new JFreeChart(plot);\n\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n\n                    null);\n\n            success = true;\n\n        }\n\n        catch (NullPointerException e) {\n\n            e.printStackTrace();\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testDrawWithNullInfo(MinMaxCategoryRendererTests.java:171)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.MinMaxCategoryRendererTests.testDrawWithNullInfo(MinMaxCategoryRendererTests.java:171)  assertTrue(success);"
      },
      "org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/renderer/category/junit/StatisticalBarRendererTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n\n            DefaultStatisticalCategoryDataset dataset \n\n                = new DefaultStatisticalCategoryDataset();\n\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n\n            dataset.add(3.0, 4.0, \"S1\", \"C2\");\n\n            CategoryPlot plot = new CategoryPlot(dataset, \n\n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n\n                    new StatisticalBarRenderer());\n\n            JFreeChart chart = new JFreeChart(plot);\n\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n\n                    null);\n\n            success = true;\n\n        }\n\n        catch (NullPointerException e) {\n\n            e.printStackTrace();\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullInfo(StatisticalBarRendererTests.java:180)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.StatisticalBarRendererTests.testDrawWithNullInfo(StatisticalBarRendererTests.java:180)  assertTrue(success);"
      },
      "org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests::testDrawWithNullInfo": {
        "path": "Chart-26/tests/org/jfree/chart/renderer/category/junit/StatisticalLineAndShapeRendererTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n        boolean success = false;\n\n        try {\n\n            DefaultStatisticalCategoryDataset dataset \n\n                = new DefaultStatisticalCategoryDataset();\n\n            dataset.add(1.0, 2.0, \"S1\", \"C1\");\n\n            dataset.add(3.0, 4.0, \"S1\", \"C2\");\n\n            CategoryPlot plot = new CategoryPlot(dataset, \n\n                    new CategoryAxis(\"Category\"), new NumberAxis(\"Value\"), \n\n                    new StatisticalLineAndShapeRenderer());\n\n            JFreeChart chart = new JFreeChart(plot);\n\n            /* BufferedImage image = */ chart.createBufferedImage(300, 200, \n\n                    null);\n\n            success = true;\n\n        }\n\n        catch (NullPointerException e) {\n\n            e.printStackTrace();\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testDrawWithNullInfo(StatisticalLineAndShapeRendererTests.java:187)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.renderer.category.junit.StatisticalLineAndShapeRendererTests.testDrawWithNullInfo(StatisticalLineAndShapeRendererTests.java:187)  assertTrue(success);"
      }
    },
    "buggy_code_comment": "/**\n* Draws the axis label.\n*\n* @param label  the label text.\n* @param g2  the graphics device.\n* @param plotArea  the plot area.\n* @param dataArea  the area inside the axes.\n* @param edge  the location of the axis.\n* @param state  the axis state (<code>null</code> not permitted).\n* @param plotState  the plot state (<code>null</code> permitted).\n*\n* @return Information about the axis.\n*/"
  },
  "Chart-3": {
    "buggy": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return copy;\n}",
    "start": 1048,
    "end": 1072,
    "fix": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.minY = Double.NaN;\n    copy.maxY = Double.NaN;\n    copy.data = new java.util.ArrayList();\n    if (this.data.size() > 0) {\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return copy;\n}",
    "loc": "source/org/jfree/data/time/TimeSeries.java",
    "issue_title": "",
    "issue_description": "",
    "buggy_fl": "public TimeSeries createCopy(int start, int end)\n        throws CloneNotSupportedException {\n    if (start < 0) {\n        throw new IllegalArgumentException(\"Requires start >= 0.\");\n    }\n    if (end < start) {\n        throw new IllegalArgumentException(\"Requires start <= end.\");\n    }\n    TimeSeries copy = (TimeSeries) super.clone();\n    copy.data = new java.util.ArrayList(); /* bug is here */\n    if (this.data.size() > 0) {\n        for (int index = start; index <= end; index++) {\n            TimeSeriesDataItem item\n                    = (TimeSeriesDataItem) this.data.get(index);\n            TimeSeriesDataItem clone = (TimeSeriesDataItem) item.clone();\n            try {\n                copy.add(clone);\n            }\n            catch (SeriesException e) {\n                e.printStackTrace();\n            }\n        }\n    }\n    return copy;\n}",
    "method_signature": {
      "return_type": "TimeSeries",
      "method_name": "createCopy",
      "params_string": "int start, int end"
    },
    "trigger_test": {
      "org.jfree.data.time.junit.TimeSeriesTests::testCreateCopy3": {
        "path": "Chart-3/tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "function_name": "testCreateCopy3",
        "src": "    public void testCreateCopy3() throws CloneNotSupportedException {\n\n        TimeSeries s1 = new TimeSeries(\"S1\");\n\n        s1.add(new Year(2009), 100.0);\n\n        s1.add(new Year(2010), 101.0);\n\n        s1.add(new Year(2011), 102.0);\n\n        assertEquals(100.0, s1.getMinY(), EPSILON);\n\n        assertEquals(102.0, s1.getMaxY(), EPSILON);\n\n\n\n        TimeSeries s2 = s1.createCopy(0, 1);\n\n        assertEquals(100.0, s2.getMinY(), EPSILON);\n\n        assertEquals(101.0, s2.getMaxY(), EPSILON);\n\n\n\n        TimeSeries s3 = s1.createCopy(1, 2);\n\n        assertEquals(101.0, s3.getMinY(), EPSILON);\n\n        assertEquals(102.0, s3.getMaxY(), EPSILON);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError: expected:<101.0> but was:<102.0>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:120)\n\tat junit.framework.Assert.assertEquals(Assert.java:129)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:288)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCreateCopy3(TimeSeriesTests.java:607)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError: expected:<101.0> but was:<102.0>\n\tat org.jfree.data.time.junit.TimeSeriesTests.testCreateCopy3(TimeSeriesTests.java:607)  assertEquals(101.0, s2.getMaxY(), EPSILON);"
      }
    },
    "buggy_code_comment": "/**\n* Creates a new timeseries by copying a subset of the data in this time\n* series.\n*\n* @param start  the index of the first time period to copy.\n* @param end  the index of the last time period to copy.\n*\n* @return A series containing a copy of this times series from start until\n*         end.\n*\n* @throws CloneNotSupportedException if there is a cloning problem.\n*/"
  },
  "Chart-4": {
    "buggy": "public Range getDataRange(ValueAxis axis) {\n\n    Range result = null;\n    List mappedDatasets = new ArrayList();\n    List includedAnnotations = new ArrayList();\n    boolean isDomainAxis = true;\n\n    // is it a domain axis?\n    int domainIndex = getDomainAxisIndex(axis);\n    if (domainIndex >= 0) {\n        isDomainAxis = true;\n        mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n                new Integer(domainIndex)));\n        if (domainIndex == 0) {\n            // grab the plot's annotations\n            Iterator iterator = this.annotations.iterator();\n            while (iterator.hasNext()) {\n                XYAnnotation annotation = (XYAnnotation) iterator.next();\n                if (annotation instanceof XYAnnotationBoundsInfo) {\n                    includedAnnotations.add(annotation);\n                }\n            }\n        }\n    }\n\n    // or is it a range axis?\n    int rangeIndex = getRangeAxisIndex(axis);\n    if (rangeIndex >= 0) {\n        isDomainAxis = false;\n        mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n                new Integer(rangeIndex)));\n        if (rangeIndex == 0) {\n            Iterator iterator = this.annotations.iterator();\n            while (iterator.hasNext()) {\n                XYAnnotation annotation = (XYAnnotation) iterator.next();\n                if (annotation instanceof XYAnnotationBoundsInfo) {\n                    includedAnnotations.add(annotation);\n                }\n            }\n        }\n    }\n\n    // iterate through the datasets that map to the axis and get the union\n    // of the ranges.\n    Iterator iterator = mappedDatasets.iterator();\n    while (iterator.hasNext()) {\n        XYDataset d = (XYDataset) iterator.next();\n        if (d != null) {\n            XYItemRenderer r = getRendererForDataset(d);\n            if (isDomainAxis) {\n                if (r != null) {\n                    result = Range.combine(result, r.findDomainBounds(d));\n                }\n                else {\n                    result = Range.combine(result,\n                            DatasetUtilities.findDomainBounds(d));\n                }\n            }\n            else {\n                if (r != null) {\n                    result = Range.combine(result, r.findRangeBounds(d));\n                }\n                else {\n                    result = Range.combine(result,\n                            DatasetUtilities.findRangeBounds(d));\n                }\n            }\n            \n                Collection c = r.getAnnotations();\n                Iterator i = c.iterator();\n                while (i.hasNext()) {\n                    XYAnnotation a = (XYAnnotation) i.next();\n                    if (a instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(a);\n                    }\n                }\n        }\n    }\n\n    Iterator it = includedAnnotations.iterator();\n    while (it.hasNext()) {\n        XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();\n        if (xyabi.getIncludeInDataBounds()) {\n            if (isDomainAxis) {\n                result = Range.combine(result, xyabi.getXRange());\n            }\n            else {\n                result = Range.combine(result, xyabi.getYRange());\n            }\n        }\n    }\n\n    return result;\n\n}",
    "start": 4425,
    "end": 4519,
    "fix": "public Range getDataRange(ValueAxis axis) {\n\n    Range result = null;\n    List mappedDatasets = new ArrayList();\n    List includedAnnotations = new ArrayList();\n    boolean isDomainAxis = true;\n\n    // is it a domain axis?\n    int domainIndex = getDomainAxisIndex(axis);\n    if (domainIndex >= 0) {\n        isDomainAxis = true;\n        mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n                new Integer(domainIndex)));\n        if (domainIndex == 0) {\n            // grab the plot's annotations\n            Iterator iterator = this.annotations.iterator();\n            while (iterator.hasNext()) {\n                XYAnnotation annotation = (XYAnnotation) iterator.next();\n                if (annotation instanceof XYAnnotationBoundsInfo) {\n                    includedAnnotations.add(annotation);\n                }\n            }\n        }\n    }\n\n    // or is it a range axis?\n    int rangeIndex = getRangeAxisIndex(axis);\n    if (rangeIndex >= 0) {\n        isDomainAxis = false;\n        mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n                new Integer(rangeIndex)));\n        if (rangeIndex == 0) {\n            Iterator iterator = this.annotations.iterator();\n            while (iterator.hasNext()) {\n                XYAnnotation annotation = (XYAnnotation) iterator.next();\n                if (annotation instanceof XYAnnotationBoundsInfo) {\n                    includedAnnotations.add(annotation);\n                }\n            }\n        }\n    }\n\n    // iterate through the datasets that map to the axis and get the union\n    // of the ranges.\n    Iterator iterator = mappedDatasets.iterator();\n    while (iterator.hasNext()) {\n        XYDataset d = (XYDataset) iterator.next();\n        if (d != null) {\n            XYItemRenderer r = getRendererForDataset(d);\n            if (isDomainAxis) {\n                if (r != null) {\n                    result = Range.combine(result, r.findDomainBounds(d));\n                }\n                else {\n                    result = Range.combine(result,\n                            DatasetUtilities.findDomainBounds(d));\n                }\n            }\n            else {\n                if (r != null) {\n                    result = Range.combine(result, r.findRangeBounds(d));\n                }\n                else {\n                    result = Range.combine(result,\n                            DatasetUtilities.findRangeBounds(d));\n                }\n            }\n            \n            if (r != null) {\n                Collection c = r.getAnnotations();\n                Iterator i = c.iterator();\n                while (i.hasNext()) {\n                    XYAnnotation a = (XYAnnotation) i.next();\n                    if (a instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(a);\n                    }\n                }\n            }\n        }\n    }\n\n    Iterator it = includedAnnotations.iterator();\n    while (it.hasNext()) {\n        XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();\n        if (xyabi.getIncludeInDataBounds()) {\n            if (isDomainAxis) {\n                result = Range.combine(result, xyabi.getXRange());\n            }\n            else {\n                result = Range.combine(result, xyabi.getYRange());\n            }\n        }\n    }\n\n    return result;\n\n}",
    "loc": "source/org/jfree/chart/plot/XYPlot.java",
    "issue_title": "",
    "issue_description": "",
    "buggy_fl": "public Range getDataRange(ValueAxis axis) {\n\n    Range result = null;\n    List mappedDatasets = new ArrayList();\n    List includedAnnotations = new ArrayList();\n    boolean isDomainAxis = true;\n\n    // is it a domain axis?\n    int domainIndex = getDomainAxisIndex(axis);\n    if (domainIndex >= 0) {\n        isDomainAxis = true;\n        mappedDatasets.addAll(getDatasetsMappedToDomainAxis(\n                new Integer(domainIndex)));\n        if (domainIndex == 0) {\n            // grab the plot's annotations\n            Iterator iterator = this.annotations.iterator();\n            while (iterator.hasNext()) {\n                XYAnnotation annotation = (XYAnnotation) iterator.next();\n                if (annotation instanceof XYAnnotationBoundsInfo) {\n                    includedAnnotations.add(annotation);\n                }\n            }\n        }\n    }\n\n    // or is it a range axis?\n    int rangeIndex = getRangeAxisIndex(axis);\n    if (rangeIndex >= 0) {\n        isDomainAxis = false;\n        mappedDatasets.addAll(getDatasetsMappedToRangeAxis(\n                new Integer(rangeIndex)));\n        if (rangeIndex == 0) {\n            Iterator iterator = this.annotations.iterator();\n            while (iterator.hasNext()) {\n                XYAnnotation annotation = (XYAnnotation) iterator.next();\n                if (annotation instanceof XYAnnotationBoundsInfo) {\n                    includedAnnotations.add(annotation);\n                }\n            }\n        }\n    }\n\n    // iterate through the datasets that map to the axis and get the union\n    // of the ranges.\n    Iterator iterator = mappedDatasets.iterator();\n    while (iterator.hasNext()) {\n        XYDataset d = (XYDataset) iterator.next();\n        if (d != null) {\n            XYItemRenderer r = getRendererForDataset(d);\n            if (isDomainAxis) {\n                if (r != null) {\n                    result = Range.combine(result, r.findDomainBounds(d));\n                }\n                else {\n                    result = Range.combine(result,\n                            DatasetUtilities.findDomainBounds(d));\n                }\n            }\n            else {\n                if (r != null) {\n                    result = Range.combine(result, r.findRangeBounds(d));\n                }\n                else {\n                    result = Range.combine(result,\n                            DatasetUtilities.findRangeBounds(d));\n                }\n            }\n            \n                Collection c = r.getAnnotations(); /* bug is here */\n                Iterator i = c.iterator();\n                while (i.hasNext()) {\n                    XYAnnotation a = (XYAnnotation) i.next();\n                    if (a instanceof XYAnnotationBoundsInfo) {\n                        includedAnnotations.add(a);\n                    }\n                }\n        } /* bug is here */\n    }\n\n    Iterator it = includedAnnotations.iterator();\n    while (it.hasNext()) {\n        XYAnnotationBoundsInfo xyabi = (XYAnnotationBoundsInfo) it.next();\n        if (xyabi.getIncludeInDataBounds()) {\n            if (isDomainAxis) {\n                result = Range.combine(result, xyabi.getXRange());\n            }\n            else {\n                result = Range.combine(result, xyabi.getYRange());\n            }\n        }\n    }\n\n    return result;\n\n}",
    "method_signature": {
      "return_type": "Range",
      "method_name": "getDataRange",
      "params_string": "ValueAxis axis"
    },
    "trigger_test": {
      "org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange1": {
        "path": "Chart-4/tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "function_name": "testXYAutoRange1",
        "src": "    public void testXYAutoRange1() {\n\n        XYSeries series = new XYSeries(\"Series 1\");\n\n        series.add(1.0, 1.0);\n\n        series.add(2.0, 2.0);\n\n        series.add(3.0, 3.0);\n\n        XYSeriesCollection dataset = new XYSeriesCollection();\n\n        dataset.addSeries(series);\n\n        JFreeChart chart = ChartFactory.createScatterPlot(\n\n            \"Test\",\n\n            \"X\",\n\n            \"Y\",\n\n            dataset,\n\n            PlotOrientation.VERTICAL,\n\n            false,\n\n            false,\n\n            false\n\n        );\n\n        XYPlot plot = (XYPlot) chart.getPlot();\n\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n\n        plot.setRangeAxis(axis);\n\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);\n\n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)\n\tat org.jfree.chart.axis.junit.LogAxisTests.testXYAutoRange1(LogAxisTests.java:260)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.axis.junit.LogAxisTests.testXYAutoRange1(LogAxisTests.java:260)  JFreeChart chart = ChartFactory.createScatterPlot(            \"Test\",            \"X\",            \"Y\",            dataset,            PlotOrientation.VERTICAL,            false,            false,            false        );"
      },
      "org.jfree.chart.axis.junit.LogAxisTests::testXYAutoRange2": {
        "path": "Chart-4/tests/org/jfree/chart/axis/junit/LogAxisTests.java",
        "function_name": "testXYAutoRange2",
        "src": "    public void testXYAutoRange2() {\n\n        XYSeries series = new XYSeries(\"Series 1\");\n\n        series.add(1.0, 1.0);\n\n        series.add(2.0, 2.0);\n\n        series.add(3.0, 3.0);\n\n        XYSeriesCollection dataset = new XYSeriesCollection();\n\n        dataset.addSeries(series);\n\n        JFreeChart chart = ChartFactory.createScatterPlot(\n\n            \"Test\",\n\n            \"X\",\n\n            \"Y\",\n\n            dataset,\n\n            PlotOrientation.VERTICAL,\n\n            false,\n\n            false,\n\n            false\n\n        );\n\n        XYPlot plot = (XYPlot) chart.getPlot();\n\n        LogAxis axis = new LogAxis(\"Log(Y)\");\n\n        plot.setRangeAxis(axis);\n\n        assertEquals(0.9465508226401592, axis.getLowerBound(), EPSILON);\n\n        assertEquals(3.1694019256486126, axis.getUpperBound(), EPSILON);\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)\n\tat org.jfree.chart.axis.junit.LogAxisTests.testXYAutoRange2(LogAxisTests.java:288)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.axis.junit.LogAxisTests.testXYAutoRange2(LogAxisTests.java:288)  JFreeChart chart = ChartFactory.createScatterPlot(            \"Test\",            \"X\",            \"Y\",            dataset,            PlotOrientation.VERTICAL,            false,            false,            false        );"
      },
      "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange1": {
        "path": "Chart-4/tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "function_name": "testXYAutoRange1",
        "src": "    public void testXYAutoRange1() {\n\n        XYSeries series = new XYSeries(\"Series 1\");\n\n        series.add(1.0, 1.0);\n\n        series.add(2.0, 2.0);\n\n        series.add(3.0, 3.0);\n\n        XYSeriesCollection dataset = new XYSeriesCollection();\n\n        dataset.addSeries(series);\n\n        JFreeChart chart = ChartFactory.createScatterPlot(\n\n            \"Test\",\n\n            \"X\",\n\n            \"Y\",\n\n            dataset,\n\n            PlotOrientation.VERTICAL,\n\n            false,\n\n            false,\n\n            false\n\n        );\n\n        XYPlot plot = (XYPlot) chart.getPlot();\n\n        NumberAxis axis = (NumberAxis) plot.getDomainAxis();\n\n        axis.setAutoRangeIncludesZero(false);\n\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);\n\n        assertEquals(3.1, axis.getUpperBound(), EPSILON);\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)\n\tat org.jfree.chart.axis.junit.NumberAxisTests.testXYAutoRange1(NumberAxisTests.java:354)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.axis.junit.NumberAxisTests.testXYAutoRange1(NumberAxisTests.java:354)  JFreeChart chart = ChartFactory.createScatterPlot(            \"Test\",            \"X\",            \"Y\",            dataset,            PlotOrientation.VERTICAL,            false,            false,            false        );"
      },
      "org.jfree.chart.axis.junit.NumberAxisTests::testXYAutoRange2": {
        "path": "Chart-4/tests/org/jfree/chart/axis/junit/NumberAxisTests.java",
        "function_name": "testXYAutoRange2",
        "src": "    public void testXYAutoRange2() {\n\n        XYSeries series = new XYSeries(\"Series 1\");\n\n        series.add(1.0, 1.0);\n\n        series.add(2.0, 2.0);\n\n        series.add(3.0, 3.0);\n\n        XYSeriesCollection dataset = new XYSeriesCollection();\n\n        dataset.addSeries(series);\n\n        JFreeChart chart = ChartFactory.createScatterPlot(\n\n            \"Test\",\n\n            \"X\",\n\n            \"Y\",\n\n            dataset,\n\n            PlotOrientation.VERTICAL,\n\n            false,\n\n            false,\n\n            false\n\n        );\n\n        XYPlot plot = (XYPlot) chart.getPlot();\n\n        NumberAxis axis = (NumberAxis) plot.getRangeAxis();\n\n        axis.setAutoRangeIncludesZero(false);\n\n        assertEquals(0.9, axis.getLowerBound(), EPSILON);\n\n        assertEquals(3.1, axis.getUpperBound(), EPSILON);\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)\n\tat org.jfree.chart.axis.junit.NumberAxisTests.testXYAutoRange2(NumberAxisTests.java:382)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.axis.junit.NumberAxisTests.testXYAutoRange2(NumberAxisTests.java:382)  JFreeChart chart = ChartFactory.createScatterPlot(            \"Test\",            \"X\",            \"Y\",            dataset,            PlotOrientation.VERTICAL,            false,            false,            false        );"
      },
      "org.jfree.chart.axis.junit.ValueAxisTests::testAxisMargins": {
        "path": "Chart-4/tests/org/jfree/chart/axis/junit/ValueAxisTests.java",
        "function_name": "testAxisMargins",
        "src": "    public void testAxisMargins() {\n\n        XYSeries series = new XYSeries(\"S1\");\n\n        series.add(100.0, 1.1);\n\n        series.add(200.0, 2.2);\n\n        XYSeriesCollection dataset = new XYSeriesCollection(series);\n\n        dataset.setIntervalWidth(0.0);\n\n        JFreeChart chart = ChartFactory.createScatterPlot(\n\n            \"Title\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL,\n\n            false, false, false\n\n        );\n\n        ValueAxis domainAxis = ((XYPlot) chart.getPlot()).getDomainAxis();\n\n        Range r = domainAxis.getRange();\n\n        assertEquals(110.0, r.getLength(), EPSILON);\n\n        domainAxis.setLowerMargin(0.10);\n\n        domainAxis.setUpperMargin(0.10);\n\n        r = domainAxis.getRange();\n\n        assertEquals(120.0, r.getLength(), EPSILON);\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)\n\tat org.jfree.chart.axis.junit.ValueAxisTests.testAxisMargins(ValueAxisTests.java:234)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.axis.junit.ValueAxisTests.testAxisMargins(ValueAxisTests.java:234)  JFreeChart chart = ChartFactory.createScatterPlot(            \"Title\", \"X\", \"Y\", dataset, PlotOrientation.VERTICAL,            false, false, false        );"
      },
      "org.jfree.chart.junit.JFreeChartTests::testSerialization4": {
        "path": "Chart-4/tests/org/jfree/chart/junit/JFreeChartTests.java",
        "function_name": "testSerialization4",
        "src": "    public void testSerialization4() {\n\n\n\n        RegularTimePeriod t = new Day();\n\n        TimeSeries series = new TimeSeries(\"Series 1\");\n\n        series.add(t, 36.4);\n\n        t = t.next();\n\n        series.add(t, 63.5);\n\n        TimeSeriesCollection dataset = new TimeSeriesCollection();\n\n        dataset.addSeries(series);\n\n\n\n        JFreeChart c1 = ChartFactory.createTimeSeriesChart(\"Test\", \"Date\",\n\n                \"Value\", dataset, true, true, true);\n\n        JFreeChart c2 = null;\n\n\n\n        try {\n\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n\n            ObjectOutput out = new ObjectOutputStream(buffer);\n\n            out.writeObject(c1);\n\n            out.close();\n\n\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n\n                    buffer.toByteArray()));\n\n            c2 = (JFreeChart) in.readObject();\n\n            in.close();\n\n        }\n\n        catch (Exception e) {\n\n            e.printStackTrace();\n\n        }\n\n        assertEquals(c1, c2);\n\n\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createTimeSeriesChart(ChartFactory.java:1893)\n\tat org.jfree.chart.junit.JFreeChartTests.testSerialization4(JFreeChartTests.java:448)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createTimeSeriesChart(ChartFactory.java:1893)  XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, null);\n\tat org.jfree.chart.junit.JFreeChartTests.testSerialization4(JFreeChartTests.java:448)  JFreeChart c1 = ChartFactory.createTimeSeriesChart(\"Test\", \"Date\",                \"Value\", dataset, true, true, true);"
      },
      "org.jfree.chart.junit.ScatterPlotTests::testDrawWithNullInfo": {
        "path": "Chart-4/tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100,\n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n          success = false;\n\n          e.printStackTrace();\n\n        }\n\n\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)\n\tat org.jfree.chart.junit.ScatterPlotTests.createChart(ScatterPlotTests.java:181)\n\tat org.jfree.chart.junit.ScatterPlotTests.setUp(ScatterPlotTests.java:98)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.ScatterPlotTests.createChart(ScatterPlotTests.java:181)  return ChartFactory.createScatterPlot(            \"Scatter Plot\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            false            // urls        );\n\tat org.jfree.chart.junit.ScatterPlotTests.setUp(ScatterPlotTests.java:98)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.ScatterPlotTests::testSetSeriesToolTipGenerator": {
        "path": "Chart-4/tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "function_name": "testSetSeriesToolTipGenerator",
        "src": "    public void testSetSeriesToolTipGenerator() {\n\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n\n        XYItemRenderer renderer = plot.getRenderer();\n\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n\n        renderer.setSeriesToolTipGenerator(0, tt);\n\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n\n        assertTrue(tt2 == tt);\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)\n\tat org.jfree.chart.junit.ScatterPlotTests.createChart(ScatterPlotTests.java:181)\n\tat org.jfree.chart.junit.ScatterPlotTests.setUp(ScatterPlotTests.java:98)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.ScatterPlotTests.createChart(ScatterPlotTests.java:181)  return ChartFactory.createScatterPlot(            \"Scatter Plot\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            false            // urls        );\n\tat org.jfree.chart.junit.ScatterPlotTests.setUp(ScatterPlotTests.java:98)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.ScatterPlotTests::testReplaceDataset": {
        "path": "Chart-4/tests/org/jfree/chart/junit/ScatterPlotTests.java",
        "function_name": "testReplaceDataset",
        "src": "    public void testReplaceDataset() {\n\n\n\n        // create a dataset...\n\n        XYSeries series1 = new XYSeries(\"Series 1\");\n\n        series1.add(10.0, 10.0);\n\n        series1.add(20.0, 20.0);\n\n        series1.add(30.0, 30.0);\n\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n\n\n        LocalListener l = new LocalListener();\n\n        this.chart.addChangeListener(l);\n\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n\n        plot.setDataset(dataset);\n\n        assertEquals(true, l.flag);\n\n        ValueAxis axis = plot.getRangeAxis();\n\n        Range range = axis.getRange();\n\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)\n\tat org.jfree.chart.junit.ScatterPlotTests.createChart(ScatterPlotTests.java:181)\n\tat org.jfree.chart.junit.ScatterPlotTests.setUp(ScatterPlotTests.java:98)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createScatterPlot(ChartFactory.java:1490)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.ScatterPlotTests.createChart(ScatterPlotTests.java:181)  return ChartFactory.createScatterPlot(            \"Scatter Plot\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            false            // urls        );\n\tat org.jfree.chart.junit.ScatterPlotTests.setUp(ScatterPlotTests.java:98)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.TimeSeriesChartTests::testDrawWithNullInfo": {
        "path": "Chart-4/tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100,\n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n          success = false;\n\n          e.printStackTrace();\n\n        }\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createTimeSeriesChart(ChartFactory.java:1893)\n\tat org.jfree.chart.junit.TimeSeriesChartTests.createChart(TimeSeriesChartTests.java:176)\n\tat org.jfree.chart.junit.TimeSeriesChartTests.setUp(TimeSeriesChartTests.java:95)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createTimeSeriesChart(ChartFactory.java:1893)  XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, null);\n\tat org.jfree.chart.junit.TimeSeriesChartTests.createChart(TimeSeriesChartTests.java:176)  return ChartFactory.createTimeSeriesChart(            \"XY Line Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            true,            // include legend            true,            // tooltips            true             // urls        );\n\tat org.jfree.chart.junit.TimeSeriesChartTests.setUp(TimeSeriesChartTests.java:95)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.TimeSeriesChartTests::testSetSeriesToolTipGenerator": {
        "path": "Chart-4/tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "function_name": "testSetSeriesToolTipGenerator",
        "src": "    public void testSetSeriesToolTipGenerator() {\n\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n\n        XYItemRenderer renderer = plot.getRenderer();\n\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n\n        renderer.setSeriesToolTipGenerator(0, tt);\n\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n\n        assertTrue(tt2 == tt);\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createTimeSeriesChart(ChartFactory.java:1893)\n\tat org.jfree.chart.junit.TimeSeriesChartTests.createChart(TimeSeriesChartTests.java:176)\n\tat org.jfree.chart.junit.TimeSeriesChartTests.setUp(TimeSeriesChartTests.java:95)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createTimeSeriesChart(ChartFactory.java:1893)  XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, null);\n\tat org.jfree.chart.junit.TimeSeriesChartTests.createChart(TimeSeriesChartTests.java:176)  return ChartFactory.createTimeSeriesChart(            \"XY Line Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            true,            // include legend            true,            // tooltips            true             // urls        );\n\tat org.jfree.chart.junit.TimeSeriesChartTests.setUp(TimeSeriesChartTests.java:95)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.TimeSeriesChartTests::testReplaceDataset": {
        "path": "Chart-4/tests/org/jfree/chart/junit/TimeSeriesChartTests.java",
        "function_name": "testReplaceDataset",
        "src": "    public void testReplaceDataset() {\n\n\n\n        // create a dataset...\n\n        XYSeries series1 = new XYSeries(\"Series 1\");\n\n        series1.add(10.0, 10.0);\n\n        series1.add(20.0, 20.0);\n\n        series1.add(30.0, 30.0);\n\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n\n\n        LocalListener l = new LocalListener();\n\n        this.chart.addChangeListener(l);\n\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n\n        plot.setDataset(dataset);\n\n        assertEquals(true, l.flag);\n\n        ValueAxis axis = plot.getRangeAxis();\n\n        Range range = axis.getRange();\n\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createTimeSeriesChart(ChartFactory.java:1893)\n\tat org.jfree.chart.junit.TimeSeriesChartTests.createChart(TimeSeriesChartTests.java:176)\n\tat org.jfree.chart.junit.TimeSeriesChartTests.setUp(TimeSeriesChartTests.java:95)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createTimeSeriesChart(ChartFactory.java:1893)  XYPlot plot = new XYPlot(dataset, timeAxis, valueAxis, null);\n\tat org.jfree.chart.junit.TimeSeriesChartTests.createChart(TimeSeriesChartTests.java:176)  return ChartFactory.createTimeSeriesChart(            \"XY Line Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            true,            // include legend            true,            // tooltips            true             // urls        );\n\tat org.jfree.chart.junit.TimeSeriesChartTests.setUp(TimeSeriesChartTests.java:95)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.XYAreaChartTests::testDrawWithNullInfo": {
        "path": "Chart-4/tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100,\n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n          success = false;\n\n          e.printStackTrace();\n\n        }\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createXYAreaChart(ChartFactory.java:1619)\n\tat org.jfree.chart.junit.XYAreaChartTests.createChart(XYAreaChartTests.java:178)\n\tat org.jfree.chart.junit.XYAreaChartTests.setUp(XYAreaChartTests.java:96)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createXYAreaChart(ChartFactory.java:1619)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.XYAreaChartTests.createChart(XYAreaChartTests.java:178)  return ChartFactory.createXYAreaChart(            \"Area Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            true             // urls        );\n\tat org.jfree.chart.junit.XYAreaChartTests.setUp(XYAreaChartTests.java:96)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.XYAreaChartTests::testSetSeriesToolTipGenerator": {
        "path": "Chart-4/tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "function_name": "testSetSeriesToolTipGenerator",
        "src": "    public void testSetSeriesToolTipGenerator() {\n\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n\n        XYItemRenderer renderer = plot.getRenderer();\n\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n\n        renderer.setSeriesToolTipGenerator(0, tt);\n\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0,\n\n                false);\n\n        assertTrue(tt2 == tt);\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createXYAreaChart(ChartFactory.java:1619)\n\tat org.jfree.chart.junit.XYAreaChartTests.createChart(XYAreaChartTests.java:178)\n\tat org.jfree.chart.junit.XYAreaChartTests.setUp(XYAreaChartTests.java:96)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createXYAreaChart(ChartFactory.java:1619)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.XYAreaChartTests.createChart(XYAreaChartTests.java:178)  return ChartFactory.createXYAreaChart(            \"Area Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            true             // urls        );\n\tat org.jfree.chart.junit.XYAreaChartTests.setUp(XYAreaChartTests.java:96)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.XYAreaChartTests::testReplaceDataset": {
        "path": "Chart-4/tests/org/jfree/chart/junit/XYAreaChartTests.java",
        "function_name": "testReplaceDataset",
        "src": "    public void testReplaceDataset() {\n\n\n\n        // create a dataset...\n\n        XYSeries series1 = new XYSeries(\"Series 1\");\n\n        series1.add(10.0, 10.0);\n\n        series1.add(20.0, 20.0);\n\n        series1.add(30.0, 30.0);\n\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n\n\n        LocalListener l = new LocalListener();\n\n        this.chart.addChangeListener(l);\n\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n\n        plot.setDataset(dataset);\n\n        assertEquals(true, l.flag);\n\n        ValueAxis axis = plot.getRangeAxis();\n\n        Range range = axis.getRange();\n\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createXYAreaChart(ChartFactory.java:1619)\n\tat org.jfree.chart.junit.XYAreaChartTests.createChart(XYAreaChartTests.java:178)\n\tat org.jfree.chart.junit.XYAreaChartTests.setUp(XYAreaChartTests.java:96)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createXYAreaChart(ChartFactory.java:1619)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.XYAreaChartTests.createChart(XYAreaChartTests.java:178)  return ChartFactory.createXYAreaChart(            \"Area Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            true             // urls        );\n\tat org.jfree.chart.junit.XYAreaChartTests.setUp(XYAreaChartTests.java:96)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.XYStepAreaChartTests::testDrawWithNullInfo": {
        "path": "Chart-4/tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100,\n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n          success = false;\n\n          e.printStackTrace();\n\n        }\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createXYStepAreaChart(ChartFactory.java:1848)\n\tat org.jfree.chart.junit.XYStepAreaChartTests.createChart(XYStepAreaChartTests.java:177)\n\tat org.jfree.chart.junit.XYStepAreaChartTests.setUp(XYStepAreaChartTests.java:96)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createXYStepAreaChart(ChartFactory.java:1848)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.XYStepAreaChartTests.createChart(XYStepAreaChartTests.java:177)  return ChartFactory.createXYStepAreaChart(            \"Step Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            true            // urls        );\n\tat org.jfree.chart.junit.XYStepAreaChartTests.setUp(XYStepAreaChartTests.java:96)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.XYStepAreaChartTests::testSetSeriesToolTipGenerator": {
        "path": "Chart-4/tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "function_name": "testSetSeriesToolTipGenerator",
        "src": "    public void testSetSeriesToolTipGenerator() {\n\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n\n        XYItemRenderer renderer = plot.getRenderer();\n\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n\n        renderer.setSeriesToolTipGenerator(0, tt);\n\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n\n        assertTrue(tt2 == tt);\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createXYStepAreaChart(ChartFactory.java:1848)\n\tat org.jfree.chart.junit.XYStepAreaChartTests.createChart(XYStepAreaChartTests.java:177)\n\tat org.jfree.chart.junit.XYStepAreaChartTests.setUp(XYStepAreaChartTests.java:96)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createXYStepAreaChart(ChartFactory.java:1848)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.XYStepAreaChartTests.createChart(XYStepAreaChartTests.java:177)  return ChartFactory.createXYStepAreaChart(            \"Step Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            true            // urls        );\n\tat org.jfree.chart.junit.XYStepAreaChartTests.setUp(XYStepAreaChartTests.java:96)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.XYStepAreaChartTests::testReplaceDataset": {
        "path": "Chart-4/tests/org/jfree/chart/junit/XYStepAreaChartTests.java",
        "function_name": "testReplaceDataset",
        "src": "    public void testReplaceDataset() {\n\n\n\n        // create a dataset...\n\n        XYSeries series1 = new XYSeries(\"Series 1\");\n\n        series1.add(10.0, 10.0);\n\n        series1.add(20.0, 20.0);\n\n        series1.add(30.0, 30.0);\n\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n\n\n        LocalListener l = new LocalListener();\n\n        this.chart.addChangeListener(l);\n\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n\n        plot.setDataset(dataset);\n\n        assertEquals(true, l.flag);\n\n        ValueAxis axis = plot.getRangeAxis();\n\n        Range range = axis.getRange();\n\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createXYStepAreaChart(ChartFactory.java:1848)\n\tat org.jfree.chart.junit.XYStepAreaChartTests.createChart(XYStepAreaChartTests.java:177)\n\tat org.jfree.chart.junit.XYStepAreaChartTests.setUp(XYStepAreaChartTests.java:96)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createXYStepAreaChart(ChartFactory.java:1848)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.XYStepAreaChartTests.createChart(XYStepAreaChartTests.java:177)  return ChartFactory.createXYStepAreaChart(            \"Step Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            true            // urls        );\n\tat org.jfree.chart.junit.XYStepAreaChartTests.setUp(XYStepAreaChartTests.java:96)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.XYStepChartTests::testDrawWithNullInfo": {
        "path": "Chart-4/tests/org/jfree/chart/junit/XYStepChartTests.java",
        "function_name": "testDrawWithNullInfo",
        "src": "    public void testDrawWithNullInfo() {\n\n\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100,\n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            this.chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null,\n\n                    null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n          success = false;\n\n          e.printStackTrace();\n\n        }\n\n        assertTrue(success);\n\n\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createXYStepChart(ChartFactory.java:1792)\n\tat org.jfree.chart.junit.XYStepChartTests.createChart(XYStepChartTests.java:177)\n\tat org.jfree.chart.junit.XYStepChartTests.setUp(XYStepChartTests.java:96)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createXYStepChart(ChartFactory.java:1792)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.XYStepChartTests.createChart(XYStepChartTests.java:177)  return ChartFactory.createXYStepChart(            \"Step Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            true             // urls        );\n\tat org.jfree.chart.junit.XYStepChartTests.setUp(XYStepChartTests.java:96)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.XYStepChartTests::testSetSeriesToolTipGenerator": {
        "path": "Chart-4/tests/org/jfree/chart/junit/XYStepChartTests.java",
        "function_name": "testSetSeriesToolTipGenerator",
        "src": "    public void testSetSeriesToolTipGenerator() {\n\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n\n        XYItemRenderer renderer = plot.getRenderer();\n\n        StandardXYToolTipGenerator tt = new StandardXYToolTipGenerator();\n\n        renderer.setSeriesToolTipGenerator(0, tt);\n\n        XYToolTipGenerator tt2 = renderer.getToolTipGenerator(0, 0, false);\n\n        assertTrue(tt2 == tt);\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createXYStepChart(ChartFactory.java:1792)\n\tat org.jfree.chart.junit.XYStepChartTests.createChart(XYStepChartTests.java:177)\n\tat org.jfree.chart.junit.XYStepChartTests.setUp(XYStepChartTests.java:96)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createXYStepChart(ChartFactory.java:1792)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.XYStepChartTests.createChart(XYStepChartTests.java:177)  return ChartFactory.createXYStepChart(            \"Step Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            true             // urls        );\n\tat org.jfree.chart.junit.XYStepChartTests.setUp(XYStepChartTests.java:96)  this.chart = createChart();"
      },
      "org.jfree.chart.junit.XYStepChartTests::testReplaceDataset": {
        "path": "Chart-4/tests/org/jfree/chart/junit/XYStepChartTests.java",
        "function_name": "testReplaceDataset",
        "src": "    public void testReplaceDataset() {\n\n\n\n        // create a dataset...\n\n        XYSeries series1 = new XYSeries(\"Series 1\");\n\n        series1.add(10.0, 10.0);\n\n        series1.add(20.0, 20.0);\n\n        series1.add(30.0, 30.0);\n\n        XYDataset dataset = new XYSeriesCollection(series1);\n\n\n\n        LocalListener l = new LocalListener();\n\n        this.chart.addChangeListener(l);\n\n        XYPlot plot = (XYPlot) this.chart.getPlot();\n\n        plot.setDataset(dataset);\n\n        assertEquals(true, l.flag);\n\n        ValueAxis axis = plot.getRangeAxis();\n\n        Range range = axis.getRange();\n\n        assertTrue(\"Expecting the lower bound of the range to be around 10: \"\n\n                   + range.getLowerBound(), range.getLowerBound() <= 10);\n\n        assertTrue(\"Expecting the upper bound of the range to be around 30: \"\n\n                   + range.getUpperBound(), range.getUpperBound() >= 30);\n\n\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)\n\tat org.jfree.chart.ChartFactory.createXYStepChart(ChartFactory.java:1792)\n\tat org.jfree.chart.junit.XYStepChartTests.createChart(XYStepChartTests.java:177)\n\tat org.jfree.chart.junit.XYStepChartTests.setUp(XYStepChartTests.java:96)\n\tat junit.framework.TestCase.runBare(TestCase.java:139)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.DateAxis.autoAdjustRange(DateAxis.java:1286)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.DateAxis.configure(DateAxis.java:719)  autoAdjustRange();\n\tat org.jfree.chart.axis.Axis.setPlot(Axis.java:1044)  configure();\n\tat org.jfree.chart.plot.XYPlot.<init>(XYPlot.java:660)  domainAxis.setPlot(this);\n\tat org.jfree.chart.ChartFactory.createXYStepChart(ChartFactory.java:1792)  XYPlot plot = new XYPlot(dataset, xAxis, yAxis, null);\n\tat org.jfree.chart.junit.XYStepChartTests.createChart(XYStepChartTests.java:177)  return ChartFactory.createXYStepChart(            \"Step Chart\",  // chart title            \"Domain\",            \"Range\",            dataset,         // data            PlotOrientation.VERTICAL,            true,            // include legend            true,            // tooltips            true             // urls        );\n\tat org.jfree.chart.junit.XYStepChartTests.setUp(XYStepChartTests.java:96)  this.chart = createChart();"
      },
      "org.jfree.chart.plot.junit.XYPlotTests::testDrawRangeGridlines": {
        "path": "Chart-4/tests/org/jfree/chart/plot/junit/XYPlotTests.java",
        "function_name": "testDrawRangeGridlines",
        "src": "    public void testDrawRangeGridlines() {\n\n        DefaultXYDataset dataset = new DefaultXYDataset();\n\n        JFreeChart chart = ChartFactory.createXYLineChart(\"Title\", \"X\", \"Y\",\n\n                dataset, PlotOrientation.VERTICAL, true, false, false);\n\n        XYPlot plot = (XYPlot) chart.getPlot();\n\n        plot.setRenderer(null);\n\n        boolean success = false;\n\n        try {\n\n            BufferedImage image = new BufferedImage(200 , 100,\n\n                    BufferedImage.TYPE_INT_RGB);\n\n            Graphics2D g2 = image.createGraphics();\n\n            chart.draw(g2, new Rectangle2D.Double(0, 0, 200, 100), null, null);\n\n            g2.dispose();\n\n            success = true;\n\n        }\n\n        catch (Exception e) {\n\n            e.printStackTrace();\n\n            success = false;\n\n        }\n\n        assertTrue(success);\n\n    }\n",
        "error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)\n\tat org.jfree.chart.plot.XYPlot.configureDomainAxes(XYPlot.java:972)\n\tat org.jfree.chart.plot.XYPlot.setRenderer(XYPlot.java:1644)\n\tat org.jfree.chart.plot.XYPlot.setRenderer(XYPlot.java:1620)\n\tat org.jfree.chart.plot.XYPlot.setRenderer(XYPlot.java:1607)\n\tat org.jfree.chart.plot.junit.XYPlotTests.testDrawRangeGridlines(XYPlotTests.java:1056)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.NullPointerException\n\tat org.jfree.chart.plot.XYPlot.getDataRange(XYPlot.java:4493)  Collection c = r.getAnnotations();\n\tat org.jfree.chart.axis.NumberAxis.autoAdjustRange(NumberAxis.java:434)  Range r = vap.getDataRange(this);\n\tat org.jfree.chart.axis.NumberAxis.configure(NumberAxis.java:417)  autoAdjustRange();\n\tat org.jfree.chart.plot.XYPlot.configureDomainAxes(XYPlot.java:972)  axis.configure();\n\tat org.jfree.chart.plot.XYPlot.setRenderer(XYPlot.java:1644)  configureDomainAxes();\n\tat org.jfree.chart.plot.XYPlot.setRenderer(XYPlot.java:1620)  setRenderer(index, renderer, true);\n\tat org.jfree.chart.plot.XYPlot.setRenderer(XYPlot.java:1607)  setRenderer(0, renderer);\n\tat org.jfree.chart.plot.junit.XYPlotTests.testDrawRangeGridlines(XYPlotTests.java:1056)  plot.setRenderer(null);"
      }
    },
    "buggy_code_comment": "/**\n* Returns the range for the specified axis.\n*\n* @param axis  the axis.\n*\n* @return The range.\n*/"
  },
  "Chart-5": {
    "buggy": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n\n    // if we get to here, we know that duplicate X values are not permitted\n    XYDataItem overwritten = null;\n    int index = indexOf(x);\n    if (index >= 0 && !this.allowDuplicateXValues) {\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n        existing.setY(y);\n    }\n    else {\n        // if the series is sorted, the negative index is a result from\n        // Collections.binarySearch() and tells us where to insert the\n        // new item...otherwise it will be just -1 and we should just\n        // append the value to the list...\n        if (this.autoSort) {\n            this.data.add(-index - 1, new XYDataItem(x, y));\n        }\n        else {\n            this.data.add(new XYDataItem(x, y));\n        }\n        // check if this addition will exceed the maximum item count...\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n    fireSeriesChanged();\n    return overwritten;\n}",
    "start": 540,
    "end": 576,
    "fix": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n    if (this.allowDuplicateXValues) {\n        add(x, y);\n        return null;\n    }\n\n    // if we get to here, we know that duplicate X values are not permitted\n    XYDataItem overwritten = null;\n    int index = indexOf(x);\n    if (index >= 0) {\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n        existing.setY(y);\n    }\n    else {\n        // if the series is sorted, the negative index is a result from\n        // Collections.binarySearch() and tells us where to insert the\n        // new item...otherwise it will be just -1 and we should just\n        // append the value to the list...\n        if (this.autoSort) {\n            this.data.add(-index - 1, new XYDataItem(x, y));\n        }\n        else {\n            this.data.add(new XYDataItem(x, y));\n        }\n        // check if this addition will exceed the maximum item count...\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n    fireSeriesChanged();\n    return overwritten;\n}",
    "loc": "source/org/jfree/data/xy/XYSeries.java",
    "issue_title": "#862 XYSeries.addOrUpdate() should add if duplicates are allowed",
    "issue_description": "Copied from this post (by Ted Schwartz) in the forum:\nhttp://www.jfree.org/phpBB2/viewtopic.php?t=24523\nI've found a bug in jfreechart-1.0.9 code for org.jfree.data.xy.XYSeries. There was a change some time ago which introduced the notion of allowing duplicate X values in XYSeries data. The method addOrUpdate(Number x, Number y) was never modified to support this, and therefore duplicate data were overwriting existing data. This is the fix I've made, but I don't know how to submit a patch...\n$ diff original/jfreechart-1.0.9/source/org/jfree/data/xy/XYSeries.java fixed/org/jfree/data/xy/XYSeries.java\n537c537\n< if (index >= 0) {\n---\n> if (index >= 0 && !allowDuplicateXValues) {\n545a546,559\n> } else if (index >= 0){\n> XYDataItem item = new XYDataItem(x, y);\n> // need to make sure we are adding *after* any duplicates\n> int size = this.data.size();\n> while (index < size\n> && item.compareTo(this.data.get(index)) == 0) {\n> index++;\n> }\n> if (index < this.data.size()) {\n> this.data.add(index, item);\n> }\n> else {\n> this.data.add(item);\n> }\n558,561d571\n< // check if this addition will exceed the maximum item count...\n< if (getItemCount() > this.maximumItemCount) {\n< this.data.remove(0);\n< }\n562a573,576\n> // check if this addition will exceed the maximum item count...\n> if (getItemCount() > this.maximumItemCount) {\n> this.data.remove(0);\n> }",
    "buggy_fl": "public XYDataItem addOrUpdate(Number x, Number y) {\n    if (x == null) {\n        throw new IllegalArgumentException(\"Null 'x' argument.\");\n    }\n /* bug is here */\n    // if we get to here, we know that duplicate X values are not permitted\n    XYDataItem overwritten = null;\n    int index = indexOf(x);\n    if (index >= 0 && !this.allowDuplicateXValues) { /* bug is here */\n        XYDataItem existing = (XYDataItem) this.data.get(index);\n        try {\n            overwritten = (XYDataItem) existing.clone();\n        }\n        catch (CloneNotSupportedException e) {\n            throw new SeriesException(\"Couldn't clone XYDataItem!\");\n        }\n        existing.setY(y);\n    }\n    else {\n        // if the series is sorted, the negative index is a result from\n        // Collections.binarySearch() and tells us where to insert the\n        // new item...otherwise it will be just -1 and we should just\n        // append the value to the list...\n        if (this.autoSort) {\n            this.data.add(-index - 1, new XYDataItem(x, y));\n        }\n        else {\n            this.data.add(new XYDataItem(x, y));\n        }\n        // check if this addition will exceed the maximum item count...\n        if (getItemCount() > this.maximumItemCount) {\n            this.data.remove(0);\n        }\n    }\n    fireSeriesChanged();\n    return overwritten;\n}",
    "method_signature": {
      "return_type": "XYDataItem",
      "method_name": "addOrUpdate",
      "params_string": "Number x, Number y"
    },
    "trigger_test": {
      "org.jfree.data.xy.junit.XYSeriesTests::testBug1955483": {
        "path": "Chart-5/tests/org/jfree/data/xy/junit/XYSeriesTests.java",
        "function_name": "testBug1955483",
        "src": "    public void testBug1955483() {\n\n        XYSeries series = new XYSeries(\"Series\", true, true);\n\n        series.addOrUpdate(1.0, 1.0);\n\n        series.addOrUpdate(1.0, 2.0);\n\n        assertEquals(new Double(1.0), series.getY(0));\n\n        assertEquals(new Double(2.0), series.getY(1));\n\n        assertEquals(2, series.getItemCount());\n\n    }\n",
        "error_msg": "java.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat java.util.ArrayList.rangeCheckForAdd(ArrayList.java:665)\n\tat java.util.ArrayList.add(ArrayList.java:477)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:564)\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:527)\n\tat org.jfree.data.xy.junit.XYSeriesTests.testBug1955483(XYSeriesTests.java:479)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.IndexOutOfBoundsException: Index: -1, Size: 1\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:564)  this.data.add(-index - 1, new XYDataItem(x, y));\n\tat org.jfree.data.xy.XYSeries.addOrUpdate(XYSeries.java:527)  return addOrUpdate(new Double(x), new Double(y));\n\tat org.jfree.data.xy.junit.XYSeriesTests.testBug1955483(XYSeriesTests.java:479)  series.addOrUpdate(1.0, 2.0);"
      }
    },
    "buggy_code_comment": "/**\n* Adds or updates an item in the series and sends a\n* {@link SeriesChangeEvent} to all registered listeners.\n*\n* @param x  the x-value (<code>null</code> not permitted).\n* @param y  the y-value (<code>null</code> permitted).\n*\n* @return A copy of the overwritten data item, or <code>null</code> if no\n*         item was overwritten.\n*/"
  },
  "Chart-6": {
    "buggy": "public boolean equals(Object obj) {\n\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n    return super.equals(obj);\n\n}",
    "start": 103,
    "end": 113,
    "fix": "public boolean equals(Object obj) {\n\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n    ShapeList that = (ShapeList) obj;\n    int listSize = size();\n    for (int i = 0; i < listSize; i++) {\n       if (!ShapeUtilities.equal((Shape) get(i), (Shape) that.get(i))) {\n           return false;\n       }\n    }\n    return true;\n\n}",
    "loc": "source/org/jfree/chart/util/ShapeList.java",
    "issue_title": "",
    "issue_description": "",
    "buggy_fl": "public boolean equals(Object obj) {\n\n    if (obj == this) {\n        return true;\n    }\n    if (!(obj instanceof ShapeList)) {\n        return false;\n    }\n    return super.equals(obj); /* bug is here */\n\n}",
    "method_signature": {
      "return_type": "boolean",
      "method_name": "equals",
      "params_string": "Object obj"
    },
    "trigger_test": {
      "org.jfree.chart.util.junit.ShapeListTests::testSerialization": {
        "path": "Chart-6/tests/org/jfree/chart/util/junit/ShapeListTests.java",
        "function_name": "testSerialization",
        "src": "    public void testSerialization() {\n\n\n\n        ShapeList l1 = new ShapeList();\n\n        l1.setShape(0, new Rectangle(1, 2, 3, 4));\n\n        l1.setShape(1, new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n\n        l1.setShape(2, null);\n\n\n\n        ShapeList l2 = null;\n\n\n\n        try {\n\n            ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n\n            ObjectOutput out = new ObjectOutputStream(buffer);\n\n            out.writeObject(l1);\n\n            out.close();\n\n\n\n            ObjectInput in = new ObjectInputStream(new ByteArrayInputStream(\n\n            \t\tbuffer.toByteArray()));\n\n            l2 = (ShapeList) in.readObject();\n\n            in.close();\n\n        }\n\n        catch (Exception e) {\n\n            e.printStackTrace();\n\n        }\n\n        assertEquals(l1, l2);\n\n\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError: expected:<org.jfree.chart.util.ShapeList@cef18a3f> but was:<org.jfree.chart.util.ShapeList@e657ea8d>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:86)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:253)\n\tat org.jfree.chart.util.junit.ShapeListTests.testSerialization(ShapeListTests.java:151)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError: expected:<org.jfree.chart.util.ShapeList@cef18a3f> but was:<org.jfree.chart.util.ShapeList@e657ea8d>\n\tat org.jfree.chart.util.junit.ShapeListTests.testSerialization(ShapeListTests.java:151)  assertEquals(l1, l2);"
      },
      "org.jfree.chart.util.junit.ShapeListTests::testEquals": {
        "path": "Chart-6/tests/org/jfree/chart/util/junit/ShapeListTests.java",
        "function_name": "testEquals",
        "src": "    public void testEquals() {\n\n        ShapeList l1 = new ShapeList();\n\n        l1.setShape(0, new Rectangle(1, 2, 3, 4));\n\n        l1.setShape(1, new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n\n        l1.setShape(2, null);\n\n\n\n        ShapeList l2 = new ShapeList();\n\n        l2.setShape(0, new Rectangle(1, 2, 3, 4));\n\n        l2.setShape(1, new Line2D.Double(1.0, 2.0, 3.0, 4.0));\n\n        l2.setShape(2, null);\n\n\n\n        assertTrue(l1.equals(l2));\n\n        assertTrue(l2.equals(l2));\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError\n\tat junit.framework.Assert.fail(Assert.java:55)\n\tat junit.framework.Assert.assertTrue(Assert.java:22)\n\tat junit.framework.Assert.assertTrue(Assert.java:31)\n\tat junit.framework.TestCase.assertTrue(TestCase.java:201)\n\tat org.jfree.chart.util.junit.ShapeListTests.testEquals(ShapeListTests.java:95)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError\n\tat org.jfree.chart.util.junit.ShapeListTests.testEquals(ShapeListTests.java:95)  assertTrue(l1.equals(l2));"
      }
    },
    "buggy_code_comment": "/**\n* Tests the list for equality with another object (typically also a list).\n*\n* @param obj  the other object (<code>null</code> permitted).\n*\n* @return A boolean.\n*/"
  },
  "Chart-7": {
    "buggy": "private void updateBounds(TimePeriod period, int index) {\n    \n    long start = period.getStart().getTime();\n    long end = period.getEnd().getTime();\n    long middle = start + ((end - start) / 2);\n\n    if (this.minStartIndex >= 0) {\n        long minStart = getDataItem(this.minStartIndex).getPeriod()\n            .getStart().getTime();\n        if (start < minStart) {\n            this.minStartIndex = index;           \n        }\n    }\n    else {\n        this.minStartIndex = index;\n    }\n    \n    if (this.maxStartIndex >= 0) {\n        long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n            .getStart().getTime();\n        if (start > maxStart) {\n            this.maxStartIndex = index;           \n        }\n    }\n    else {\n        this.maxStartIndex = index;\n    }\n    \n    if (this.minMiddleIndex >= 0) {\n        long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n            .getTime();\n        long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n            .getTime();\n        long minMiddle = s + (e - s) / 2;\n        if (middle < minMiddle) {\n            this.minMiddleIndex = index;           \n        }\n    }\n    else {\n        this.minMiddleIndex = index;\n    }\n    \n    if (this.maxMiddleIndex >= 0) {\n        long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n            .getTime();\n        long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n            .getTime();\n        long maxMiddle = s + (e - s) / 2;\n        if (middle > maxMiddle) {\n            this.maxMiddleIndex = index;           \n        }\n    }\n    else {\n        this.maxMiddleIndex = index;\n    }\n    \n    if (this.minEndIndex >= 0) {\n        long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n            .getTime();\n        if (end < minEnd) {\n            this.minEndIndex = index;           \n        }\n    }\n    else {\n        this.minEndIndex = index;\n    }\n   \n    if (this.maxEndIndex >= 0) {\n        long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n            .getTime();\n        if (end > maxEnd) {\n            this.maxEndIndex = index;           \n        }\n    }\n    else {\n        this.maxEndIndex = index;\n    }\n    \n}",
    "start": 257,
    "end": 335,
    "fix": "private void updateBounds(TimePeriod period, int index) {\n    \n    long start = period.getStart().getTime();\n    long end = period.getEnd().getTime();\n    long middle = start + ((end - start) / 2);\n\n    if (this.minStartIndex >= 0) {\n        long minStart = getDataItem(this.minStartIndex).getPeriod()\n            .getStart().getTime();\n        if (start < minStart) {\n            this.minStartIndex = index;           \n        }\n    }\n    else {\n        this.minStartIndex = index;\n    }\n    \n    if (this.maxStartIndex >= 0) {\n        long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n            .getStart().getTime();\n        if (start > maxStart) {\n            this.maxStartIndex = index;           \n        }\n    }\n    else {\n        this.maxStartIndex = index;\n    }\n    \n    if (this.minMiddleIndex >= 0) {\n        long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n            .getTime();\n        long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n            .getTime();\n        long minMiddle = s + (e - s) / 2;\n        if (middle < minMiddle) {\n            this.minMiddleIndex = index;           \n        }\n    }\n    else {\n        this.minMiddleIndex = index;\n    }\n    \n    if (this.maxMiddleIndex >= 0) {\n        long s = getDataItem(this.maxMiddleIndex).getPeriod().getStart()\n            .getTime();\n        long e = getDataItem(this.maxMiddleIndex).getPeriod().getEnd()\n            .getTime();\n        long maxMiddle = s + (e - s) / 2;\n        if (middle > maxMiddle) {\n            this.maxMiddleIndex = index;           \n        }\n    }\n    else {\n        this.maxMiddleIndex = index;\n    }\n    \n    if (this.minEndIndex >= 0) {\n        long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n            .getTime();\n        if (end < minEnd) {\n            this.minEndIndex = index;           \n        }\n    }\n    else {\n        this.minEndIndex = index;\n    }\n   \n    if (this.maxEndIndex >= 0) {\n        long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n            .getTime();\n        if (end > maxEnd) {\n            this.maxEndIndex = index;           \n        }\n    }\n    else {\n        this.maxEndIndex = index;\n    }\n    \n}",
    "loc": "source/org/jfree/data/time/TimePeriodValues.java",
    "issue_title": "",
    "issue_description": "",
    "buggy_fl": "private void updateBounds(TimePeriod period, int index) {\n    \n    long start = period.getStart().getTime();\n    long end = period.getEnd().getTime();\n    long middle = start + ((end - start) / 2);\n\n    if (this.minStartIndex >= 0) {\n        long minStart = getDataItem(this.minStartIndex).getPeriod()\n            .getStart().getTime();\n        if (start < minStart) {\n            this.minStartIndex = index;           \n        }\n    }\n    else {\n        this.minStartIndex = index;\n    }\n    \n    if (this.maxStartIndex >= 0) {\n        long maxStart = getDataItem(this.maxStartIndex).getPeriod()\n            .getStart().getTime();\n        if (start > maxStart) {\n            this.maxStartIndex = index;           \n        }\n    }\n    else {\n        this.maxStartIndex = index;\n    }\n    \n    if (this.minMiddleIndex >= 0) {\n        long s = getDataItem(this.minMiddleIndex).getPeriod().getStart()\n            .getTime();\n        long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd()\n            .getTime();\n        long minMiddle = s + (e - s) / 2;\n        if (middle < minMiddle) {\n            this.minMiddleIndex = index;           \n        }\n    }\n    else {\n        this.minMiddleIndex = index;\n    }\n    \n    if (this.maxMiddleIndex >= 0) {\n        long s = getDataItem(this.minMiddleIndex).getPeriod().getStart() /* bug is here */\n            .getTime();\n        long e = getDataItem(this.minMiddleIndex).getPeriod().getEnd() /* bug is here */\n            .getTime();\n        long maxMiddle = s + (e - s) / 2;\n        if (middle > maxMiddle) {\n            this.maxMiddleIndex = index;           \n        }\n    }\n    else {\n        this.maxMiddleIndex = index;\n    }\n    \n    if (this.minEndIndex >= 0) {\n        long minEnd = getDataItem(this.minEndIndex).getPeriod().getEnd()\n            .getTime();\n        if (end < minEnd) {\n            this.minEndIndex = index;           \n        }\n    }\n    else {\n        this.minEndIndex = index;\n    }\n   \n    if (this.maxEndIndex >= 0) {\n        long maxEnd = getDataItem(this.maxEndIndex).getPeriod().getEnd()\n            .getTime();\n        if (end > maxEnd) {\n            this.maxEndIndex = index;           \n        }\n    }\n    else {\n        this.maxEndIndex = index;\n    }\n    \n}",
    "method_signature": {
      "return_type": "void",
      "method_name": "updateBounds",
      "params_string": "TimePeriod period, int index"
    },
    "trigger_test": {
      "org.jfree.data.time.junit.TimePeriodValuesTests::testGetMaxMiddleIndex": {
        "path": "Chart-7/tests/org/jfree/data/time/junit/TimePeriodValuesTests.java",
        "function_name": "testGetMaxMiddleIndex",
        "src": "    public void testGetMaxMiddleIndex() {\n\n        TimePeriodValues s = new TimePeriodValues(\"Test\");\n\n        assertEquals(-1, s.getMaxMiddleIndex());\n\n        s.add(new SimpleTimePeriod(100L, 200L), 1.0);\n\n        assertEquals(0, s.getMaxMiddleIndex());\n\n        s.add(new SimpleTimePeriod(300L, 400L), 2.0);\n\n        assertEquals(1, s.getMaxMiddleIndex());\n\n        s.add(new SimpleTimePeriod(0L, 50L), 3.0);\n\n        assertEquals(1, s.getMaxMiddleIndex());\n\n        s.add(new SimpleTimePeriod(150L, 200L), 4.0);\n\n        assertEquals(1, s.getMaxMiddleIndex());\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError: expected:<1> but was:<3>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.jfree.data.time.junit.TimePeriodValuesTests.testGetMaxMiddleIndex(TimePeriodValuesTests.java:377)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError: expected:<1> but was:<3>\n\tat org.jfree.data.time.junit.TimePeriodValuesTests.testGetMaxMiddleIndex(TimePeriodValuesTests.java:377)  assertEquals(1, s.getMaxMiddleIndex());"
      }
    },
    "buggy_code_comment": "/**\n* Update the index values for the maximum and minimum bounds.\n*\n* @param period  the time period.\n* @param index  the index of the time period.\n*/"
  },
  "Chart-8": {
    "buggy": "public Week(Date time, TimeZone zone) {\n    // defer argument checking...\n    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault());\n}",
    "start": 173,
    "end": 176,
    "fix": "public Week(Date time, TimeZone zone) {\n    // defer argument checking...\n    this(time, zone, Locale.getDefault());\n}",
    "loc": "source/org/jfree/data/time/Week.java",
    "issue_title": "",
    "issue_description": "",
    "buggy_fl": "public Week(Date time, TimeZone zone) {\n    // defer argument checking...\n    this(time, RegularTimePeriod.DEFAULT_TIME_ZONE, Locale.getDefault()); /* bug is here */\n}",
    "method_signature": {
      "return_type": "",
      "method_name": "Week",
      "params_string": "Date time, TimeZone zone"
    },
    "trigger_test": {
      "org.jfree.data.time.junit.WeekTests::testConstructor": {
        "path": "Chart-8/tests/org/jfree/data/time/junit/WeekTests.java",
        "function_name": "testConstructor",
        "src": "    public void testConstructor() {\n\n        Locale savedLocale = Locale.getDefault();\n\n        TimeZone savedZone = TimeZone.getDefault();\n\n        Locale.setDefault(new Locale(\"da\", \"DK\"));\n\n        TimeZone.setDefault(TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n\n        GregorianCalendar cal = (GregorianCalendar) Calendar.getInstance(\n\n                TimeZone.getDefault(), Locale.getDefault());\n\n\n\n        // first day of week is monday\n\n        assertEquals(Calendar.MONDAY, cal.getFirstDayOfWeek());\n\n        cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0);\n\n        cal.set(Calendar.MILLISECOND, 0);\n\n        Date t = cal.getTime();\n\n        Week w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n\n        assertEquals(34, w.getWeek());\n\n\n\n        Locale.setDefault(Locale.US);\n\n        TimeZone.setDefault(TimeZone.getTimeZone(\"US/Detroit\"));\n\n        cal = (GregorianCalendar) Calendar.getInstance(TimeZone.getDefault());\n\n        // first day of week is Sunday\n\n        assertEquals(Calendar.SUNDAY, cal.getFirstDayOfWeek());\n\n        cal.set(2007, Calendar.AUGUST, 26, 1, 0, 0);\n\n        cal.set(Calendar.MILLISECOND, 0);\n\n\n\n        t = cal.getTime();\n\n        w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"));\n\n        assertEquals(35, w.getWeek());\n\n        w = new Week(t, TimeZone.getTimeZone(\"Europe/Copenhagen\"),\n\n                new Locale(\"da\", \"DK\"));\n\n        assertEquals(34, w.getWeek());\n\n\n\n        Locale.setDefault(savedLocale);\n\n        TimeZone.setDefault(savedZone);\n\n    }\n",
        "error_msg": "junit.framework.AssertionFailedError: expected:<35> but was:<34>\n\tat junit.framework.Assert.fail(Assert.java:57)\n\tat junit.framework.Assert.failNotEquals(Assert.java:329)\n\tat junit.framework.Assert.assertEquals(Assert.java:78)\n\tat junit.framework.Assert.assertEquals(Assert.java:234)\n\tat junit.framework.Assert.assertEquals(Assert.java:241)\n\tat junit.framework.TestCase.assertEquals(TestCase.java:409)\n\tat org.jfree.data.time.junit.WeekTests.testConstructor(WeekTests.java:530)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "junit.framework.AssertionFailedError: expected:<35> but was:<34>\n\tat org.jfree.data.time.junit.WeekTests.testConstructor(WeekTests.java:530)  assertEquals(35, w.getWeek());"
      }
    },
    "buggy_code_comment": "/**\n* Creates a time period for the week in which the specified date/time\n* falls, calculated relative to the specified time zone.\n*\n* @param time  the date/time (<code>null</code> not permitted).\n* @param zone  the time zone (<code>null</code> not permitted).\n*\n* @deprecated As of 1.0.7, use {@link #Week(Date, TimeZone, Locale)}.\n*/"
  },
  "Chart-9": {
    "buggy": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null 'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  // start is after last data item\n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             // end period is not in original series\n        endIndex = -(endIndex + 1); // this is first item AFTER end period\n        endIndex = endIndex - 1;    // so this is last item BEFORE end\n    }\n    if (endIndex < 0) {\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        return copy;\n    }\n    else {\n        return createCopy(startIndex, endIndex);\n    }\n\n}",
    "start": 918,
    "end": 956,
    "fix": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null 'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  // start is after last data item\n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             // end period is not in original series\n        endIndex = -(endIndex + 1); // this is first item AFTER end period\n        endIndex = endIndex - 1;    // so this is last item BEFORE end\n    }\n    if ((endIndex < 0)  || (endIndex < startIndex)) {\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        return copy;\n    }\n    else {\n        return createCopy(startIndex, endIndex);\n    }\n\n}",
    "loc": "source/org/jfree/data/time/TimeSeries.java",
    "issue_title": "#818 Error on TimeSeries createCopy() method",
    "issue_description": "The test case at the end fails with :\njava.lang.IllegalArgumentException: Requires start <= end.\nThe problem is in that the int start and end indexes corresponding to given timePeriod are computed incorectly. Here I would expect an empty serie to be returned, not an exception. This is with jfreechart 1.0.7\npublic class foo {\nstatic public void main(String args[]) {\nTimeSeries foo = new TimeSeries(\"foo\",Day.class);\nfoo.add(new Day(19,4,2005),1);\nfoo.add(new Day(25,5,2005),1);\nfoo.add(new Day(28,5,2005),1);\nfoo.add(new Day(30,5,2005),1);\nfoo.add(new Day(1,6,2005),1);\nfoo.add(new Day(3,6,2005),1);\nfoo.add(new Day(19,8,2005),1);\nfoo.add(new Day(31,1,2006),1);\n    try \\{\n        TimeSeries bar = foo.createCopy\\(new Day\\(1,12,2005\\),new Day\\(18,1,2006\\)\\);\n    \\} catch \\(CloneNotSupportedException e\\) \\{\n\n        e.printStackTrace\\(\\);\n\n}\n}",
    "buggy_fl": "public TimeSeries createCopy(RegularTimePeriod start, RegularTimePeriod end)\n    throws CloneNotSupportedException {\n\n    if (start == null) {\n        throw new IllegalArgumentException(\"Null 'start' argument.\");\n    }\n    if (end == null) {\n        throw new IllegalArgumentException(\"Null 'end' argument.\");\n    }\n    if (start.compareTo(end) > 0) {\n        throw new IllegalArgumentException(\n                \"Requires start on or before end.\");\n    }\n    boolean emptyRange = false;\n    int startIndex = getIndex(start);\n    if (startIndex < 0) {\n        startIndex = -(startIndex + 1);\n        if (startIndex == this.data.size()) {\n            emptyRange = true;  // start is after last data item\n        }\n    }\n    int endIndex = getIndex(end);\n    if (endIndex < 0) {             // end period is not in original series\n        endIndex = -(endIndex + 1); // this is first item AFTER end period\n        endIndex = endIndex - 1;    // so this is last item BEFORE end\n    }\n    if (endIndex < 0) { /* bug is here */\n        emptyRange = true;\n    }\n    if (emptyRange) {\n        TimeSeries copy = (TimeSeries) super.clone();\n        copy.data = new java.util.ArrayList();\n        return copy;\n    }\n    else {\n        return createCopy(startIndex, endIndex);\n    }\n\n}",
    "method_signature": {
      "return_type": "TimeSeries",
      "method_name": "createCopy",
      "params_string": "RegularTimePeriod start, RegularTimePeriod end"
    },
    "trigger_test": {
      "org.jfree.data.time.junit.TimeSeriesTests::testBug1864222": {
        "path": "Chart-9/tests/org/jfree/data/time/junit/TimeSeriesTests.java",
        "function_name": "testBug1864222",
        "src": "    public void testBug1864222() {\n\n        TimeSeries s = new TimeSeries(\"S\");\n\n        s.add(new Day(19, 8, 2005), 1);\n\n        s.add(new Day(31, 1, 2006), 1);\n\n        boolean pass = true;\n\n        try {\n\n            s.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));\n\n        }\n\n        catch (CloneNotSupportedException e) {\n\n            pass = false;\n\n        }\n\n        assertTrue(pass);\n\n    }\n",
        "error_msg": "java.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:883)\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:953)\n\tat org.jfree.data.time.junit.TimeSeriesTests.testBug1864222(TimeSeriesTests.java:829)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)\n\tat sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat junit.framework.TestCase.runTest(TestCase.java:176)\n\tat junit.framework.TestCase.runBare(TestCase.java:141)\n\tat junit.framework.TestResult$1.protect(TestResult.java:122)\n\tat junit.framework.TestResult.runProtected(TestResult.java:142)\n\tat junit.framework.TestResult.run(TestResult.java:125)\n\tat junit.framework.TestCase.run(TestCase.java:129)\n\tat junit.framework.TestSuite.runTest(TestSuite.java:255)\n\tat junit.framework.TestSuite.run(TestSuite.java:250)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTestRunner.run(JUnitTestRunner.java:520)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeInVM(JUnitTask.java:1484)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:872)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.executeOrQueue(JUnitTask.java:1972)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute1(JUnitTask.java:824)\n\tat org.apache.tools.ant.taskdefs.optional.junit.JUnitTask.execute(JUnitTask.java:2277)\n\tat org.apache.tools.ant.UnknownElement.execute(UnknownElement.java:291)\n\tat sun.reflect.GeneratedMethodAccessor4.invoke(Unknown Source)\n\tat sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)\n\tat java.lang.reflect.Method.invoke(Method.java:498)\n\tat org.apache.tools.ant.dispatch.DispatchUtils.execute(DispatchUtils.java:106)\n\tat org.apache.tools.ant.Task.perform(Task.java:348)\n\tat org.apache.tools.ant.Target.execute(Target.java:392)\n\tat org.apache.tools.ant.Target.performTasks(Target.java:413)\n\tat org.apache.tools.ant.Project.executeSortedTargets(Project.java:1399)\n\tat org.apache.tools.ant.Project.executeTarget(Project.java:1368)\n\tat org.apache.tools.ant.helper.DefaultExecutor.executeTargets(DefaultExecutor.java:41)\n\tat org.apache.tools.ant.Project.executeTargets(Project.java:1251)\n\tat org.apache.tools.ant.Main.runBuild(Main.java:811)\n\tat org.apache.tools.ant.Main.startAnt(Main.java:217)\n\tat org.apache.tools.ant.launch.Launcher.run(Launcher.java:280)\n\tat org.apache.tools.ant.launch.Launcher.main(Launcher.java:109)",
        "clean_error_msg": "java.lang.IllegalArgumentException: Requires start <= end.\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:883)  throw new IllegalArgumentException(\"Requires start <= end.\");\n\tat org.jfree.data.time.TimeSeries.createCopy(TimeSeries.java:953)  return createCopy(startIndex, endIndex);\n\tat org.jfree.data.time.junit.TimeSeriesTests.testBug1864222(TimeSeriesTests.java:829)  s.createCopy(new Day(1, 12, 2005), new Day(18, 1, 2006));"
      }
    },
    "buggy_code_comment": "/**\n* Creates a new timeseries by copying a subset of the data in this time\n* series.\n*\n* @param start  the first time period to copy (<code>null</code> not\n*         permitted).\n* @param end  the last time period to copy (<code>null</code> not\n*         permitted).\n*\n* @return A time series containing a copy of this time series from start\n*         until end.\n*\n* @throws CloneNotSupportedException if there is a cloning problem.\n*/"
  }
}